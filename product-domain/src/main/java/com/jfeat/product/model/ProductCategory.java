/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.product.model;

import com.jfeat.kit.SqlQuery;
import com.jfeat.product.constant.CacheDefinition;
import com.jfeat.product.model.base.ProductCategoryBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.ehcache.CacheKit;

import java.util.ArrayList;
import java.util.List;

@TableBind(tableName = "t_product_category")
public class ProductCategory extends ProductCategoryBase<ProductCategory> {

    public static final Integer VISIBLE = 1;
    public static final Integer PROMOTED = 1;
    // 零售
    public static final Integer RETAIL = 0;
    // 批发
    public static final Integer WHOLESALE = 1;
    // 试用
    public static final Integer TRIAL = 2;

    /**
     * Only use for query.
     */
    public static ProductCategory dao = new ProductCategory();

    public boolean hasChildren() {
        SqlQuery query = new SqlQuery();
        query.select("count(*)");
        query.from(getTableName());
        query.where(Fields.PARENT_ID.eq("?"));
        return Db.queryLong(query.sql(), getId()) > 0;
    }

    public boolean hasProduct() {
        return Product.dao.hasProduct(getId());
    }

    public ProductCategory findByName(String name) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.NAME.eq("?"));
        return findFirst(query.sql(), name);
    }

    private List<ProductCategory> children;

    public List<ProductCategory> getChildren() {
        if (children == null) {
            SqlQuery query = new SqlQuery();
            query.from(getTableName());
            query.where(Fields.PARENT_ID.eq("?"));
            query.and(Fields.VISIBLE.eq("?"));
            query.orderBy(Fields.SORT_ORDER.toString());
            children = find(query.sql(), getId(), VISIBLE);
        }
        return children;
    }

    private List<ProductCategory> retailChildren;

    public List<ProductCategory> getRetailChildren() {
        if (retailChildren == null) {
            SqlQuery query = new SqlQuery();
            query.from(getTableName());
            query.where(Fields.PARENT_ID.eq("?"));
            query.and(Fields.VISIBLE.eq("?"));
            query.and(Fields.WHOLESALE.eq("?"));
            query.orderBy(Fields.SORT_ORDER.toString());
            retailChildren = find(query.sql(), getId(), VISIBLE, RETAIL);
        }
        return retailChildren;
    }


    private ProductCategory parent;

    public ProductCategory getParent() {
        if (parent == null) {
            if (getParentId() != null) {
                parent = findById(getParentId());
            }
        }

        return parent;
    }

    public List<ProductCategoryProperty> getCategoryProperties() {
        return ProductCategoryProperty.dao.findByProductCategoryId(getId());
    }

    /**
     * 对产品类别添加属性, 同时会把该产品类别下的产品都加上这个属性。
     *
     * @param properties
     */
    public void addCategoryProperties(List<ProductCategoryProperty> properties) {
        List<Product> products = Product.dao.findByCategoryId(getId());
        List<ProductProperty> productProperties = new ArrayList<>();
        for (ProductCategoryProperty property : properties) {
            property.setCategoryId(getId());
            property.save();
            for (Product product : products) {
                ProductProperty productProperty = new ProductProperty();
                productProperty.setProductId(product.getId());
                productProperty.setPropertyId(property.getId());
                productProperty.setPropertyValue(property.getDefaultValue());
                productProperties.add(productProperty);
            }
        }

        Db.batchSave(productProperties, 100);
    }

    public void updateCategoryProperties(List<ProductCategoryProperty> properties) {
        Db.batchUpdate(properties, 100);
    }

    public void deleteCategoryProperties(List<ProductCategoryProperty> properties) {
        for (ProductCategoryProperty property : properties) {
            property.delete();
        }
    }

    public List<ProductCategory> findAllRoot() {
        return findAllRoot(null);
    }

    public List<ProductCategory> findAllRoot(Integer type) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.PARENT_ID.isNull());
        query.and(Fields.VISIBLE.eq("?"));
        query.orderBy(Fields.SORT_ORDER.toString());
        if (type != null) {
            query.and(Fields.WHOLESALE.eq("?"));
            return find(query.sql(), VISIBLE, type);
        }
        return find(query.sql(), VISIBLE);
    }

    public List<ProductCategory> findAllRetailRoot() {
        return findAllRoot(RETAIL);
    }

    public List<ProductCategory> findAllWholesaleRoot() {
        return findAllRoot(WHOLESALE);
    }

    public List<ProductCategory> findAllTrialRoot() {
        return findAllRoot(TRIAL);
    }

    public boolean save() {
        CacheKit.remove(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.PRODUCT_CATEGORY_LIST_KEY);
        return super.save();
    }

    public boolean update() {
        CacheKit.remove(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.PRODUCT_CATEGORY_LIST_KEY);
        return super.update();
    }

    public boolean delete() {
        CacheKit.remove(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.PRODUCT_CATEGORY_LIST_KEY);
        return super.delete();
    }

    public List<ProductCategory> findAllRecursively() {
        List<ProductCategory> categories = CacheKit.get(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.PRODUCT_CATEGORY_LIST_KEY);
        if (categories != null) {
            return categories;
        }
        categories = findAllRoot();
        recursivelyGetChildren(categories);
        CacheKit.put(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.PRODUCT_CATEGORY_LIST_KEY, categories);
        return categories;
    }

    public List<ProductCategory> findRetailRecursively() {
        List<ProductCategory> categories = CacheKit.get(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.RETAIL_PRODUCT_CATEGORY_LIST_KEY);
        if (categories != null) {
            return categories;
        }
        categories = findAllRetailRoot();
        recursivelyGetRetailChildren(categories);
        CacheKit.put(CacheDefinition.MALL_CACHE_NAME, CacheDefinition.RETAIL_PRODUCT_CATEGORY_LIST_KEY, categories);
        return categories;
    }

    private void recursivelyGetChildren(List<ProductCategory> categories) {
        for (ProductCategory category : categories) {
            List<ProductCategory> children = category.getChildren();
            category.put("sub_categories", children);
            recursivelyGetChildren(children);
        }
    }

    private void recursivelyGetRetailChildren(List<ProductCategory> categories) {
        for (ProductCategory category : categories) {
            List<ProductCategory> children = category.getRetailChildren();
            category.put("sub_categories", children);
            recursivelyGetRetailChildren(children);
        }
    }
}
