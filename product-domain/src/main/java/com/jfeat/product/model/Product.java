/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.product.model;

import com.google.common.collect.Lists;
import com.jfeat.kit.SqlQuery;
import com.jfeat.merchant.model.SettledMerchant;
import com.jfeat.product.exception.StockBalanceException;
import com.jfeat.product.model.base.ProductBase;
import com.jfeat.product.model.base.ProductCategoryBase;
import com.jfeat.product.model.param.ProductParam;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_product")
public class Product extends ProductBase<Product> {

    public static final int ZONE_ZERO = 1;  //零元区
    public static final int ZONE_SUPERIOR = 2; //精品区
    public static final int ZONE_SPECIAL = 3; //特价区

    //后台管理更新产品价格事件
    public static final int EVENT_PRICE_UPDATE = 100;
    //后台管理更新产品封面事件
    public static final int EVENT_COVER_UPDATE = 101;

    /**
     * Only use for query.
     */
    public static Product dao = new Product();


    public enum Status {
        DRAFT,
        PENDING_APPROVAL,
        APPROVED,
        ONSELL,
        OFFSELL
    }

    public enum Promoted {
        YES(1),
        NO(0);
        private int value;

        Promoted(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }
    }

    public enum AllowCoupon {
        YES(1),
        NO(0);
        private int value;
        AllowCoupon(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }
    }

    public enum Virtual {
        YES(1),
        NO(0);
        private int value;
        Virtual(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }
    }

    public enum FreeShipping {
        YES(1),
        NO(0);
        private int value;

        FreeShipping(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }
    }

    /**
     * 去掉商业秘密属性，如成本价
     */
    public void removeSecretAttrs() {
        String[] attrs = new String[] {
                Fields.COST_PRICE.toString()
        };
        remove(attrs);
    }

    /**
     * 是否为预售产品
     * @return
     */
    public boolean isPreSale() {
        return getPresale() > 0;
    }

    public boolean isOnsell() {
        return Status.valueOf(getStatus()) == Status.ONSELL;
    }

    public boolean isFreeShipping() {
        return FreeShipping.YES.equals(getFreeShipping());
    }

    public ProductPurchaseStrategy getPurchaseStrategy() {
        return ProductPurchaseStrategy.dao.findByProductId(getId());
    }

    public boolean hasProduct(int categoryId) {
        SqlQuery query = new SqlQuery();
        query.select("count(*)");
        query.from(getTableName());
        query.where(Fields.CATEGORY_ID.eq("?"));
        return Db.queryLong(query.sql(), categoryId) > 0;
    }

    public List<Record> findStockBalanceLimited(String status, int limit) {
        List<Object> param = Lists.newArrayList();
        StringBuilder sql = new StringBuilder("select p.*,ps.name as specification_name,ps.stock_balance as specification_stock_balance " +
                "from t_product p left join t_product_specification ps on p.id=ps.product_id " +
                "where (p.stock_balance<=? or ps.stock_balance<=?) ");
        param.add(limit);
        param.add(limit);
        if (StrKit.notBlank(status)) {
            sql.append(" and status=? ");
            param.add(status);
        }
        return Db.find(sql.toString(), param.toArray());
    }

    public List<Product> findAllOnSellRetail() {
        String sql = "select p.* from t_product p join t_product_category pc on pc.id = p.category_id where p.status = ? and pc.wholesale = ?";
        return find(sql, Status.ONSELL.toString(), ProductCategory.RETAIL);
    }

    public Page<Product> paginateByPromoted(Integer pageNumber, Integer pageSize, String[] orderByList, String[] orderByDescList, Integer... categoryIds) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.PROMOTED.eq("?"));
        query.and(Fields.STATUS.eq("?"));
        List<Object> params = Lists.newArrayList();
        String select = "select *";
        StringBuilder sql = new StringBuilder("from t_product where promoted=? and status=? ");
        params.add(Promoted.YES.getValue());
        params.add(Status.ONSELL.toString());
        if (categoryIds != null) {
            sql.append(" and ( ");
            String cond = " ";
            for (Integer categoryId : categoryIds) {
                sql.append(cond);
                sql.append(" category_id=? ");
                params.add(categoryId);
                cond = " or ";
            }
            sql.append(" ) ");
        }
        sql.append(" order by ");
        String comma = "";
        if (orderByList != null) {

            for (String str : orderByList) {
                sql.append(comma);
                sql.append(str);
                comma = ", ";
            }
        }
        if (orderByDescList != null) {
            comma = "";
            for (String str : orderByDescList) {
                sql.append(comma);
                sql.append(str);
                sql.append(" desc");
                comma = ", ";
            }
        }
        sql.append(comma);
        sql.append("sort_order,id");

        return paginate(pageNumber, pageSize, select, sql.toString(), params.toArray());
    }

    public List<Product> findByCategoryId(int categoryId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.CATEGORY_ID.eq("?"));
        return find(query.sql(), categoryId);
    }

    public Page<Product> paginate(ProductParam productParam) {
        String select = "select p.*,c.name as category_name," +
                "m.name as merchant_name,m.logo as merchant_logo,m.phone as merchant_phone," +
                "case p.status " +
                "when 'ONSELL' then 10 " +
                "when 'APPROVED' then 9 " +
                "when 'PENDING_APPROVAL' then 8 " +
                "when 'DRAFT' then 7 else 0 " +
                "end as _sort";
        boolean isGroupBy = false;
        List<Object> params = new ArrayList<>();
        StringBuilder builder = new StringBuilder();
        builder.append("from ");
        builder.append(getTableName());
        builder.append(" as p ");
        builder.append(" join ");
        builder.append(ProductCategory.dao.getTableName());
        builder.append(" as c ");
        builder.append(" on p.category_id=c.id ");
        // 使用 left join, 兼容mid为空的历史情况
        builder.append(" left join ");
        builder.append(SettledMerchant.dao.getTableName());
        builder.append(" as m ");
        builder.append(" on p.mid=m.id ");

        if (productParam.getPurchaseStrategyId() != null) {
            builder.append(" join t_product_purchase_strategy_relation as ppsr on ppsr.product_id=p.id ");
        }

        if (productParam.getTags() != null && productParam.getTags().length > 0) {
            builder.append(" join t_product_tag_relation as ptr on ptr.product_id = p.id join t_product_tag pt on pt.id = ptr.tag_id ");
        }

        String cond = " where ";

        if (productParam.getMid() != null) {
            builder.append(cond);
            builder.append("p.");
            builder.append(Fields.MID.eq("?"));
            params.add(productParam.getMid());
            cond = " and ";
        }

        if (productParam.getPurchaseStrategyId() != null) {
            builder.append(cond);
            builder.append("ppsr.strategy_id=?");
            params.add(productParam.getPurchaseStrategyId());
            cond = " and ";
        }

        if (StrKit.notBlank(productParam.getName())) {
            builder.append(cond);
            builder.append("p.");
            builder.append(Fields.NAME.like("?"));
            params.add("%" + productParam.getName() + "%");
            cond = " and ";
        }
        if (StrKit.notBlank(productParam.getStatus())) {
            builder.append(cond);
            builder.append("p.");
            builder.append(Fields.STATUS.eq("?"));
            params.add(productParam.getStatus());
            cond = " and ";
        }
        if (productParam.getCategoryId() != null) {
            builder.append(cond);
            builder.append(Fields.CATEGORY_ID.eq("?"));
            params.add(productParam.getCategoryId());
            cond = " and ";
        }

        if (productParam.getPromoted() != null) {
            builder.append(cond);
            builder.append("p.");
            builder.append(Fields.PROMOTED.eq("?"));
            params.add(productParam.getPromoted());
            cond = " and ";
        }

        if (productParam.getIsVirtual() != null) {
            builder.append(cond);
            builder.append("p.");
            builder.append(Fields.IS_VIRTUAL.eq("?"));
            params.add(productParam.getIsVirtual());
            cond = " and ";
        }

        if (productParam.getIsPresale() != null) {
            builder.append(cond);
            builder.append("p.");
            if (productParam.getIsPresale() > 0) {
                builder.append(Fields.PRESALE.gt("0"));
            } else {
                builder.append(Fields.PRESALE.eq("0"));
            }
            cond = " and ";
        }

        if (productParam.getZone() != null) {
            builder.append(cond);
            builder.append(Fields.PARTNER_LEVEL_ZONE.eq("?"));
            params.add(productParam.getZone());
            cond = " and ";
        }

        if (StrKit.notBlank(productParam.getBarCode())) {
            builder.append(cond);
            builder.append(" ( ").append(Fields.BARCODE.like("?"));
            builder.append(" or ").append(Fields.BAR_CODE.like("?")).append(" ) ");
            params.add("%" + productParam.getBarCode() + "%");
            params.add("%" + productParam.getBarCode() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(productParam.getStoreLocation())) {
            builder.append(cond);
            builder.append(Fields.STORE_LOCATION.like("?"));
            params.add(productParam.getStoreLocation() + "%");
            cond = " and ";
        }
        if (productParam.getWholesale() != null) {
            builder.append(cond);
            builder.append(" c.").append(ProductCategory.Fields.WHOLESALE.eq("?"));
            params.add(productParam.getWholesale());
            cond = " and ";
        }

        if (productParam.getTags() != null && productParam.getTags().length > 0) {
            isGroupBy = true;
            builder.append(cond).append(" ( ");
            String[] tags = productParam.getTags();
            String or = "";
            for (int i = 0; i < tags.length; i++) {
                builder.append("pt.identifier = ? ").append(or);
                params.add(tags[i]);
                or = " or ";
            }
            builder.append(" ) ");
            builder.append(" group by p.id ");
        }

        builder.append(" order by ");
        String comma = "";
        if (productParam.getOrderByList() != null) {

            for (String str : productParam.getOrderByList()) {
                builder.append(comma);
                builder.append(" p.");
                builder.append(str);
                comma = ", ";
            }
        }
        if (productParam.getOrderByDescList() != null) {
            if (productParam.getOrderByList() != null && productParam.getOrderByList().length > 0) {
                comma = ",";
            } else {
                comma = "";
            }
            for (String str : productParam.getOrderByDescList()) {
                builder.append(comma);
                builder.append(" p.");
                builder.append(str);
                builder.append(" desc");
                comma = ", ";
            }
        }
        builder.append(comma);
        builder.append("_sort desc,p.sort_order,p.id");


        return paginate(productParam.getPageNumber(), productParam.getPageSize(), isGroupBy, select, builder.toString(), params.toArray());
    }

    public FareTemplate getFareTemplate() {
        return FareTemplate.dao.findById(getFareId());
    }

    public List<ProductImage> getImages() {
        return ProductImage.dao.findByProductIdAndType(getId(), ProductImage.TYPE_DETAIL);
    }

    public List<ProductImage> getCovers() {
        return ProductImage.dao.findByProductIdAndType(getId(), ProductImage.TYPE_COVER);
    }

    public List<ProductImage> getVideos() {
        return ProductImage.dao.findByProductIdAndType(getId(), ProductImage.TYPE_VIDEO);
    }

    public List<ProductProperty> getProductProperties() {
        return ProductProperty.dao.findByProductId(getId());
    }

    public ProductCategory getCategory() {
        return ProductCategory.dao.findById(getCategoryId());
    }

    public ProductBrand getBrand() {
        return ProductBrand.dao.findById(getBrandId());
    }

    public List<ProductSpecification> getProductSpecifications() {
        return ProductSpecification.dao.findByProductId(getId());
    }

    public ProductDescription getProductDescription() {
        return ProductDescription.dao.findByProductId(getId());
    }

    public List<ProductTag> getProductTags() {
        return ProductTag.dao.findByProductId(getId());
    }

    public SettledMerchant getMerchant() {
        return SettledMerchant.dao.findById(getMid());
    }

    @Override
    public boolean save() {
        Date date = new Date();
        setCreatedDate(date);
        setLastModifiedDate(date);
        return super.save();
    }

    public Product addImage(String url) {
        ProductImage image = new ProductImage();
        image.setProductId(getId());
        image.setUrl(url);
        image.setType(ProductImage.TYPE_DETAIL);
        image.save();
        return this;
    }

    public Product addCover(String url, int sortOrder) {
        ProductImage image = new ProductImage();
        image.setProductId(getId());
        image.setUrl(url);
        image.setType(ProductImage.TYPE_COVER);
        image.setSortOrder(sortOrder);
        image.save();
        return this;
    }

    public Product addVideo(String url, int sortOrder) {
        ProductImage image = new ProductImage();
        image.setProductId(getId());
        image.setUrl(url);
        image.setType(ProductImage.TYPE_VIDEO);
        image.setSortOrder(sortOrder);
        image.save();
        return this;
    }

    public Product updateDescription(String description) {
        ProductDescription productDescription = getProductDescription();
        if (productDescription != null) {
            productDescription.setDescription(description);
            productDescription.update();
        } else {
            productDescription = new ProductDescription();
            productDescription.setProductId(getId());
            productDescription.setDescription(description);
            productDescription.save();
        }
        return this;
    }

    @Override
    public boolean update() {
        setLastModifiedDate(new Date());
        return super.update();
    }

    /**
     * 返回各个状态的产品数目。
     * 注意：只会返回有数据的状态，如果某个状态没有记录，则不会有相应的status,count返回。
     *
     * @return
     */
    public List<Record> calcStatusCount() {
        return Db.find("select status, count(status) as count from t_product group by status order by count desc");
    }

    public static void increaseViewCount(int productId) {
        String sql = "update t_product set view_count=view_count+1 where id=?";
        Db.update(sql, productId);
    }

    /**
     * 下单后减库存,加销量
     *
     * @param productIds
     * @param specificationIds
     * @param quantities
     * @throws StockBalanceException
     */
    public static void increaseSales(List<Integer> productIds, List<Integer> specificationIds, List<Integer> quantities) throws StockBalanceException {
        for (int i = 0; i < productIds.size(); i++) {
            if (specificationIds.get(i) == null) {
                String sql = "update t_product set sales=sales+?, stock_balance=stock_balance-? where id=? and stock_balance>=?";
                int result = Db.update(sql, quantities.get(i), quantities.get(i), productIds.get(i), quantities.get(i));
                if (result == 0) {
                    throw new StockBalanceException("update stock balance error.");
                }
            } else {
                increaseSale(productIds.get(i), quantities.get(i));
                String sql = "update t_product_specification set stock_balance=stock_balance-? where id=? and stock_balance>=?";
                int result = Db.update(sql, quantities.get(i), specificationIds.get(i), quantities.get(i));
                if (result == 0) {
                    throw new StockBalanceException("update stock balance error.");
                }
            }
        }
    }

    public static void increaseSale(Integer productId, Integer quantity) throws StockBalanceException {
        String sql = "update t_product set sales=sales+? where id=?";
        int result = Db.update(sql, quantity, productId);
        if (result == 0) {
            throw new StockBalanceException("update stock balance error.");
        }
    }

    public static void decreaseSale(Integer productId, Integer quantity) throws StockBalanceException {
        String sql = "update t_product set sales=sales-? where id=? and sales>=?";
        int result = Db.update(sql, quantity, productId, quantity);
        if (result == 0) {
            throw new StockBalanceException("update stock balance error.");
        }
    }

    /**
     * 订单取消,退款,支付超时后加回库存,减去销量
     *
     * @param productIds
     * @param specificationIds
     * @param quantities
     * @throws StockBalanceException
     */
    public static void decreaseSales(List<Integer> productIds, List<Integer> specificationIds, List<Integer> quantities) throws StockBalanceException {
        for (int i = 0; i < productIds.size(); i++) {
            if (specificationIds.get(i) == null) {
                String sql = "update t_product set sales=sales-?, stock_balance=stock_balance+? where id=? and sales>=?";
                int result = Db.update(sql, quantities.get(i), quantities.get(i), productIds.get(i), quantities.get(i));
                if (result == 0) {
                    throw new StockBalanceException("update stock balance error.");
                }
            } else {
                decreaseSale(productIds.get(i), quantities.get(i));
                String sql = "update t_product_specification set stock_balance=stock_balance+? where id=?";
                int result = Db.update(sql, quantities.get(i), specificationIds.get(i));
                if (result == 0) {
                    throw new StockBalanceException("update stock balance error.");
                }
            }
        }
    }

    public void offSellProduct(List<Integer> ids) {
        String sql = "update t_product set status='OFFSELL' where id=?";
        Integer[][] params = new Integer[ids.size()][1];
        for (int i = 0; i < ids.size(); i++) {
            params[i][0] = ids.get(i);
        }
        Db.batch(sql, params, 100);
    }

    public void priceUpdatedNotify(List<ProductSpecification> specifications) {
        notifyAllObserver(this, EVENT_PRICE_UPDATE, specifications);
    }

    public void coverUpdatedNotify() {
        notifyAllObserver(this, EVENT_COVER_UPDATE, null);
    }
}
