/*
 *   Copyright (C) 2014-2018 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.identity.model;

import com.jfeat.identity.model.base.UserJoinNotifyBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfeat.identity.model.User;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.*;

@TableBind(tableName = "t_user_join_notify")
public class UserJoinNotify extends UserJoinNotifyBase<UserJoinNotify> {

    /**
     * Only use for query.
     */
    public static UserJoinNotify dao = new UserJoinNotify();

    public static final Integer UN_READ = 0;
    public static final Integer READ = 1;

    @Override
    public boolean save() {
        setJoinTime(new Date());
        setIsRead(UN_READ.shortValue());
        return super.save();
    }

    public boolean markAllAsRead() {
        return Db.update("update t_user_join_notify set is_read = ?", READ.byteValue()) > 0;
    }

    public Page<UserJoinNotify> paginate(int pageNumber, int pageSize, Integer isRead) {
        String select = "select a.*, u.avatar, u.phone, u.name";
        StringBuilder query = new StringBuilder(" from t_user_join_notify a join t_user u on u.id = a.user_id where 1=1 ");
        List<Object> params = new ArrayList<>();
        String cond = " and ";
        if (isRead != null) {
            query.append(cond).append(" a.is_read = ? ");
            params.add(isRead);
        }
        query.append(" order by a.id desc ");
        return super.paginate(pageNumber, pageSize, select, query.toString(), params.toArray());
    }

    public int queryUnreadCount() {
        return Db.queryNumber("select count(1) from t_user_join_notify where is_read = ?", UN_READ).intValue();
    }

    public boolean notified(Integer userId) {
        return Db.queryNumber("select count(1) from t_user_join_notify where user_id = ?", userId).intValue() > 0;
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

}
