/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.identity.model;

import com.jfeat.identity.constant.TableName;
import com.jfeat.identity.model.base.UserBase;
import com.jfeat.identity.model.param.UserParam;
import com.jfeat.kit.Digests;
import com.jfeat.kit.Encodes;
import com.jfeat.kit.SqlQuery;
import com.jfeat.kit.UIDKit;
import com.jfinal.ext.kit.RandomKit;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_user")
public class User extends UserBase<User> {

    public static final int INFOLLOW_SUBSCRIBE = 0;
    public static final int INFOLLOW_UNSUBSCRIBE = 1;

    public static final int EVENT_USER_INFOLLOW_SUBSCRIBE = 100;
    public static final int EVENT_USER_INFOLLOW_UNSUBSCRIBE = 101;

    /**
     * 终端用户
     */
    public static final int APP_USER = 1;
    /**
     * 后台用户
     */
    public static final int ADMIN_USER = 0;

    /**
     * Only use for query.
     */
    public static User dao = new User();


    private static Logger logger = LoggerFactory.getLogger(User.class);

    public static final String HASH_ALGORITHM = "SHA-1";
    public static final int HASH_INTERATIONS = 1024;
    private static final int SALT_SIZE = 8;
    private static final int DEFAULT_TOKEN_EXPIRED_TIME = 30;//DAYS

    public enum Status {
        NORMAL,
        LOCKED
    }

    public enum Sex {
        SECRET(0),
        MALE(1),
        FEMALE(2);
        private int val;
        Sex(int val) {
            this.val = val;
        }

        public int getValue() {
            return val;
        }
    }

    public User findByUid(String uid) {
        return findBy(Fields.UID, uid);
    }

    public User findByInvitationCode(String code) {
        return findBy(Fields.INVITATION_CODE, code);
    }

    public User findByLoginName(String name) {
        return findBy(Fields.LOGIN_NAME, name);
    }

    public User findByPhone(String phone) {
        return findBy(Fields.PHONE, phone);
    }

    public User findByWeixin(String weixin) {
        return findBy(Fields.WEIXIN, weixin);
    }

    public User findByWxUnionid(String unionid) {
        return findBy(Fields.WX_UNIONID, unionid);
    }

    public User findByWxaOpenid(String wxaOpenid) {
        return findBy(Fields.WXA_OPENID, wxaOpenid);
    }

    public User findByWxappOpenid(String wxappOpenid) {
        return findBy(Fields.WXAPP_OPENID, wxappOpenid);
    }


    private User findBy(Fields key, String value) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(key.eq("?"));
        return findFirst(query.sql(), value);
    }

    public List<User> findByRoleId(int roleId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.join(TableName.T_USER_ROLE);
        query.on(Fields.ID.eq("user_id"));
        query.where("role_id=?");
        return find(query.sql(), roleId);
    }

    public boolean updateRoles(Integer[] roles) {
        Db.update("delete from t_user_role where user_id=?", getId());
        if (roles != null) {
            for (Integer roleId : roles) {
                if (roleId != null) {
                    Record record = new Record();
                    record.set("user_id", getId());
                    record.set("role_id", roleId);
                    Db.save("t_user_role", record);
                }
            }
        }
        return true;
    }


    public boolean update() {
        if (StrKit.notBlank(getPassword())) {
            entryptPassword(this);
        }
        else {
            remove(Fields.PASSWORD.toString());
        }
        remove(Fields.REGISTER_DATE.toString());
        remove(Fields.INVITATION_CODE.toString());

        return super.update();
    }

    public void updateLastLoginDate() {
        setLastLoginDate(new Date());
        super.update();
    }

    public void updateGrade(String grade) {
        Db.update("update t_user set grade = ? where id = ?", grade, getId());
    }

    public void invalidInvitationQrcodeUrl() {
        Db.update("update t_user set invitation_qrcode_url = null");
    }

    @Override
    public boolean save() {
        entryptPassword(this);
        setStatus(Status.NORMAL.toString());
        setRegisterDate(new Date());
        String code = DigestUtils.md5Hex(getLoginName() + getPhone() + RandomKit.randomStr());
        setInvitationCode(code);
        if (super.save()) {
            setUid("U" + UIDKit.next());
            setPassword("");
            return update();
        }
        return false;
    }

    /**
     * 返回指定userId列表的用户头像信息
     * @param ids
     * @return
     */
    public List<User> findUserInfoByIds(List<Integer> ids) {
        StringBuilder sql = new StringBuilder("select a.id, a.login_name, a.name, a.avatar, a.sex, a.real_name, a.phone, " +
                "a.birthday, b.name as inviter_name " +
                "from t_user a left join t_user b on a.inviter_id = b.id where a.id in (");
        for (int i = 0; i < ids.size(); i++) {
            sql.append(ids.get(i));
            if (i < ids.size() - 1) {
                sql.append(",");
            }
        }
        sql.append(")");
        return find(sql.toString());
    }

    public Page<User> paginate(UserParam userParam) {
        List<Object> params = new ArrayList<>();
        String select = "select u.*, i.name as inviter_name, i.login_name as inviter_account ";
        StringBuilder query = new StringBuilder();
        query.append("from t_user as u left join t_user i on i.id = u.inviter_id ");

        if (userParam.getRoleId() != null) {
            query.append("join t_user_role as ur on u.id=ur.user_id ");
        }

        String cond = " where ";

        if (StrKit.notBlank(userParam.getName())) {
            query.append(cond);
            query.append(" ( ");
            query.append("u.").append(Fields.NAME.like("?"));
            params.add("%" + userParam.getName() + "%");
            query.append(" or ");
            query.append("u.").append(Fields.LOGIN_NAME.like("?"));
            params.add("%" + userParam.getName() + "%");
            query.append(" ) ");
            cond = " and ";
        }

        if (StrKit.notBlank(userParam.getPhone())) {
            query.append(cond);
            query.append("u.").append(Fields.PHONE.like("?"));
            params.add(userParam.getPhone() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(userParam.getStatus())) {
            query.append(cond);
            query.append("u.").append(Fields.STATUS.eq("?"));
            params.add(userParam.getStatus());
            cond = " and ";
        }

        if (userParam.getAppUser() != null) {
            query.append(cond);
            query.append("u.").append(Fields.APP_USER.eq("?"));
            params.add(userParam.getAppUser());
            cond = " and ";
        }

        if (userParam.getRoleId() != null) {
            query.append(cond);
            query.append("ur.role_id=?");
            params.add(userParam.getRoleId());
            cond = " and ";
        }

        return paginate(userParam.getPageNumber(), userParam.getPageSize(), select, query.toString(), params.toArray());
    }

    public User getInviter() {
        return User.dao.findById(getInviterId());
    }

    public List<Role> getRoles() {
        return Role.dao.findByUserId(getId());
    }

    public List<String> getRoleList() {
        List<String> list = new ArrayList<String>();
        for (Role role : getRoles()) {
            list.add(role.getName());
        }
        return list;
    }

    public boolean verifyPassword(String password) {
        String hashPassword = Encodes.encodeHex(Digests.sha1(password.getBytes(), Encodes.decodeHex(getSalt()), HASH_INTERATIONS));
        return hashPassword.equals(getPassword());
    }

    public void resetTokenExpiredDate() {
        SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DAY_OF_MONTH, DEFAULT_TOKEN_EXPIRED_TIME);
        setTokenExpiredDate(c.getTime());
    }

    public void resetTokenSalt() {
        byte[] salt = Digests.generateSalt(SALT_SIZE);
        setTokenSalt(Encodes.encodeHex(salt));
    }

    public void userInfollowSubscribeNotify() {
        notifyAllObserver(this, EVENT_USER_INFOLLOW_SUBSCRIBE, null);
    }

    public void userInfollowUnSubscribeNotify() {
        notifyAllObserver(this, EVENT_USER_INFOLLOW_UNSUBSCRIBE, null);
    }


    /**
     * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash
     */
    private void entryptPassword(User user) {
        byte[] salt = Digests.generateSalt(SALT_SIZE);
        user.setSalt(Encodes.encodeHex(salt));
        user.setTokenSalt(Encodes.encodeHex(salt));
        byte[] hashPassword = Digests.sha1(user.getPassword().getBytes(), salt, HASH_INTERATIONS);
        user.setPassword(Encodes.encodeHex(hashPassword));
    }
}
