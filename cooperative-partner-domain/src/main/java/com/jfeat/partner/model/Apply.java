/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.google.common.collect.Lists;
import com.jfeat.kit.SqlQuery;
import com.jfeat.partner.model.base.ApplyBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_apply")
public class Apply extends ApplyBase<Apply> {

    /**
     * Only use for query.
     */
    public static Apply dao = new Apply();

    public enum Type {
        PLATFORM,
        PARTNER,
        AGENT,
        SELLER,
        PHYSICAL, //线下资格
        CROWN, //皇冠商
        COPARTNER //合伙人
    }

    public enum Status {
        INIT,
        APPROVE,
        REJECT
    }

    public Long countInitApplies() {
        return Db.queryNumber("select count(*) from t_apply where status=?", Status.INIT.toString()).longValue();
    }

    public Apply findByUserId(Integer userId) {
        SqlQuery query = new SqlQuery().from(getTableName()).where(Fields.USER_ID.eq("?")).orderByDesc(Fields.ID.toString());
        return findFirst(query.sql(), userId);
    }

    public Apply findByUserIdType(Integer userId, String type) {
        SqlQuery query = new SqlQuery()
                .from(getTableName())
                .where(Fields.USER_ID.eq("?"))
                .and(Fields.TYPE.eq("?"))
                .orderByDesc(Fields.ID.toString());
        return findFirst(query.sql(), userId, type);
    }

    public Apply findByUserIdTypeStatus(Integer userId, String type, String status) {
        SqlQuery query = new SqlQuery()
                .from(getTableName())
                .where(Fields.USER_ID.eq("?"))
                .and(Fields.TYPE.eq("?"))
                .and(Fields.STATUS.eq("?"))
                .orderByDesc(Fields.ID.toString());
        return findFirst(query.sql(), userId, type, status);
    }

    public List<Apply> findByTypeStatus(String type, String status) {
        SqlQuery query = new SqlQuery()
                .from(getTableName())
                .where(Fields.TYPE.eq("?"))
                .and(Fields.STATUS.eq("?"));
        return find(query.sql(), type, status);
    }

    public Page<Apply> paginate(int pageNumber, int pageSize, String uid, String type, String status) {
        List<Object> params = Lists.newArrayList();
        StringBuilder select = new StringBuilder("select a.*, u.uid, u.name");
        StringBuilder query = new StringBuilder();
        query.append("from ");
        query.append(this.getTableName());
        query.append(" as a join t_user u on a.user_id=u.id ");
        String cond = " where ";
        if (StrKit.notBlank(uid)) {
            query.append(cond);
            query.append("u.uid=?");
            params.add(uid);
            cond = " and ";
        }
        if (StrKit.notBlank(type)) {
            query.append(cond);
            query.append(Fields.TYPE.eq("?"));
            params.add(type);
            cond = " and ";
        }
        if (StrKit.notBlank(status)) {
            query.append(cond);
            query.append("a." + Fields.STATUS.eq("?"));
            params.add(status);
            cond = " and ";
        }

        return this.paginate(pageNumber, pageSize, select.toString(), query.toString(), params.toArray());
    }
}
