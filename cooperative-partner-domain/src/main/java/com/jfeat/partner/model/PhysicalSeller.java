/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.google.common.collect.Lists;
import com.jfeat.partner.model.base.PhysicalSellerBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_physical_seller")
public class PhysicalSeller extends PhysicalSellerBase<PhysicalSeller> {

    /**
     * Only use for query.
     */
    public static PhysicalSeller dao = new PhysicalSeller();

    /**
     * 皇冠推荐关系
     */
    public enum CrownParentLevel {
        NONE(0), //没关系
        LEVEL_ONE(1), //上级
        LEVEL_TWO(2); //上上级
        private int value;

        CrownParentLevel(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }
    }

    public Seller getSeller() {
        return Seller.dao.findById(getSellerId());
    }

    public PhysicalSeller getParent() {
        return findBySellerId(getParentSellerId());
    }

    public Seller getParentSeller() {
        return Seller.dao.findById(getParentSellerId());
    }

    public List<PhysicalSeller> getChildren() {
        return find("select * from t_physical_seller where parent_seller_id=?", getSellerId());
    }

    public PhysicalSeller getVerboseParent() {
        String sql = "select p.*, u.name as user_name, u.uid, u.avatar, u.followed, u.follow_time " +
                "from t_physical_seller p " +
                "join t_seller s on s.id=p.seller_id " +
                "join t_user u on u.id=s.user_id " +
                "where p.seller_id=?";
        return findFirst(sql, getParentSellerId());
    }

    public List<PhysicalSeller> getVerboseChildren() {
        String sql = "select p.*, s.crown_ship as crown_ship, u.name as user_name, u.uid, u.avatar, u.followed, u.follow_time, u.real_name, u.phone " +
                "from t_physical_seller p " +
                "join t_seller s on s.id=p.seller_id " +
                "join t_user u on u.id=s.user_id " +
                "where p.parent_seller_id=?";
        return find(sql, getSellerId());
    }

    public boolean save() {
        setCreatedDate(new Date());
        return super.save();
    }

    public List<PhysicalSeller> findCrownSeller() {
        return find("select p.* from t_physical_seller p join t_seller s on p.seller_id=s.id where s.crown_ship=?",
                Seller.CrownShip.YES.getValue());
    }

    public PhysicalSeller findBySellerId(Integer sellerId) {
        return findFirst("select * from t_physical_seller where seller_id=?", sellerId);
    }

    public boolean deleteBySellerId(Integer sellerId) {
        return Db.update("delete from t_physical_seller where seller_id=?", sellerId) > 0;
    }

    public Page<PhysicalSeller> paginate(int pageNumber, int pageSize, String uid, String realName, String province, String city, String district) {
        List<Object> params = Lists.newArrayList();
        String select = "select p.*, u.uid, u.name as user_name, u.real_name as real_name, u.phone as phone";
        StringBuilder query = new StringBuilder();
        query.append("from t_physical_seller p join t_seller s on s.id=p.seller_id ");
        query.append("join t_user u on u.id=s.user_id ");
        String cond = " where ";
        if (StrKit.notBlank(uid)) {
            query.append(cond);
            query.append("u.uid=?");
            params.add(uid);
            cond = " and ";
        }
        if (StrKit.notBlank(realName)) {
            query.append(cond);
            query.append("u.real_name like ?");
            params.add(realName + "%");
            cond = " and ";
        }
        if (StrKit.notBlank(province)) {
            query.append(cond);
            query.append("p.province=?");
            params.add(province);
            cond = " and ";
        }
        if (StrKit.notBlank(city)) {
            query.append(cond);
            query.append("p.city=?");
            params.add(city);
            cond = " and ";
        }
        if (StrKit.notBlank(district)) {
            query.append(cond);
            query.append("p.district=?");
            params.add(district);
            cond = " and ";
        }
        return paginate(pageNumber, pageSize, select, query.toString(), params.toArray());

    }

    public Page<PhysicalSeller> paginate(int pageNumber, int pageSize, String uid, String realName) {
        List<Object> params = Lists.newArrayList();
        String select = "select p.*, u.uid, u.name as user_name, u.real_name as real_name, u.phone as phone";
        StringBuilder query = new StringBuilder();
        query.append("from t_physical_seller p join t_seller s on s.id=p.seller_id ");
        query.append("join t_user u on u.id=s.user_id ");
        String cond = " where ";
        if (StrKit.notBlank(uid)) {
            query.append(cond);
            query.append("u.uid=?");
            params.add(uid);
            cond = " and ";
        }
        if (StrKit.notBlank(realName)) {
            query.append(cond);
            query.append("u.real_name like ?");
            params.add(realName + "%");
            cond = " and ";
        }
        return paginate(pageNumber, pageSize, select, query.toString(), params.toArray());
    }

    public int getPhysicalSellerCount(String startTime, String endTime) {
        String sql = "select count(*) from t_physical_seller" +
                " where created_date between ? and ?";
        return Db.queryNumber(sql, startTime, endTime).intValue();
    }
}
