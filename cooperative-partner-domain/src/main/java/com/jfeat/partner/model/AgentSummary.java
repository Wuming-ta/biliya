/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.google.common.collect.Lists;
import com.jfeat.partner.model.base.AgentSummaryBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;

import java.math.BigDecimal;
import java.util.List;

@TableBind(tableName = "t_agent_summary")
public class AgentSummary extends AgentSummaryBase<AgentSummary> {

    /**
     * Only use for query.
     */
    public static AgentSummary dao = new AgentSummary();

    public static final Integer TRANSFERRED = 1;
    public static final Integer UN_TRANSFERRED = 0;

    public List<AgentSummary> findBySellerId(Integer sellerId) {
        return findBySellerIdAndMonth(sellerId, null);
    }

    public Seller getSeller() {
        return Seller.dao.findById(getSellerId());
    }

    public List<AgentSummary> findBySellerIdAndPcdId(int sellerId, int pcdId) {
        String sql = "select * from t_agent_summary" +
                " where seller_id=? and pcd_id=?";
        return find(sql, sellerId, pcdId);
    }

    public AgentSummary findFirstBySellerIdPcdIdStatisticMonthWithoutEndMonth(int sellerId, int pcdId, String month) {
        String sql = "select * from t_agent_summary" +
                " where seller_id=? and pcd_id=? and statistic_month=? and end_month is null";
        return findFirst(sql, sellerId, pcdId, month);
    }

    public AgentSummary findFirstBySellerIdPcdIdStatisticMonthEndMonth(int sellerId, int pcdId, String statisticMonth, String endMonth) {
        String sql = "select * from t_agent_summary" +
                " where seller_id=? and pcd_id=? and statistic_month=? and end_month=?";
        return findFirst(sql, sellerId, pcdId, statisticMonth, endMonth);
    }

    public List<AgentSummary> findByMonthWithoutEndMonth(String month) {
        String sql = "select * from t_agent_summary" +
                " where statistic_month=? and end_month is null";
        return find(sql, month);
    }

    /**
     * @param sellerId
     * @param month    yyyy-MM-01
     * @return
     */
    public List<AgentSummary> findBySellerIdAndMonth(int sellerId, String month) {
        String sql = "select a.*," +
                " concat(case when isnull(d.name) then '' else concat(d.name,'-') end," +
                " case when isnull(c.name) then '' else concat(c.name,'-') end," +
                " b.name)" +
                " as pcd_name from t_agent_summary as a " +
                " join t_pcd as b on a.pcd_id=b.id" +
                " left join t_pcd as c on b.parent_id=c.id" +
                " left join t_pcd as d on c.parent_id=d.id" +
                " where a.seller_id=?";
        List<Object> params = Lists.newArrayList();
        params.add(sellerId);
        if (StrKit.notBlank(month)) {
            sql += " and a.statistic_month=?";
            params.add(month);
        }
        return find(sql, params.toArray());
    }

    /**
     * @param sellerId
     * @param statisticMonth yyyy-MM-dd
     * @param endMonth       yyyy-MM-dd
     * @return
     */
    public List<AgentSummary> findBySellerIdStatisticMonthEndMonth(int sellerId, String statisticMonth, String endMonth) {
        String sql = "select a.*," +
                " concat(case when isnull(d.name) then '' else concat(d.name,'-') end," +
                " case when isnull(c.name) then '' else concat(c.name,'-') end," +
                " b.name)" +
                " as pcd_name from t_agent_summary as a " +
                " join t_pcd as b on a.pcd_id=b.id" +
                " left join t_pcd as c on b.parent_id=c.id" +
                " left join t_pcd as d on c.parent_id=d.id" +
                " where a.seller_id=? and statistic_month=? and end_month=?";
        return find(sql, sellerId, statisticMonth, endMonth);
    }


    public AgentSummary findFirstBySellerIdPcdIdYearAndMonth(int sellerId, int pcdId, int year, int month) {
        String sql = "select a.*," +
                " concat(case when isnull(d.name) then '' else concat(d.name,'-') end," +
                " case when isnull(c.name) then '' else concat(c.name,'-') end," +
                " b.name)" +
                " as pcd_name" +
                " from t_agent_summary as a" +
                " join t_pcd as b on a.pcd_id=b.id" +
                " left join t_pcd as c on b.parent_id=c.id" +
                " left join t_pcd as d on c.parent_id=d.id" +
                " where a.seller_id=? and pcd_id=?" +
                " and year(a.end_month)=? and month(a.end_month)=?";
        return findFirst(sql, sellerId, pcdId, year, month);
    }

    /**
     * 根据pcdId 和 销售额 计算奖金比例
     *
     * @param pcdId
     * @param amount
     * @return
     */
    public BigDecimal getPercentage(int pcdId, BigDecimal amount) {
        BigDecimal percentage = BigDecimal.ZERO;
        if (amount.doubleValue() <= 0) {
            logger.info("pcdId = {} 's amount = {}", pcdId, amount);
            return percentage;
        }
        List<PhysicalAgentBonus> physicalAgentBonuses = PhysicalAgentBonus.dao.findByPcdId(pcdId);
        if (physicalAgentBonuses.size() == 0) {
            logger.info("pcdId = {} 's bonus has not any setting");
            return percentage;
        }
        for (PhysicalAgentBonus physicalAgentBonus : physicalAgentBonuses) {
            if (amount.doubleValue() > physicalAgentBonus.getMinAmount().doubleValue() &&
                    (amount.doubleValue() <= physicalAgentBonus.getMaxAmount().doubleValue() || physicalAgentBonus.getMaxAmount().intValue() == -1)) {
                logger.info("pcdId = {} 's amount = {}, bonus percentage = {}", pcdId, amount, physicalAgentBonus.getPercentage());
                return physicalAgentBonus.getPercentage();
            }
        }
        return percentage;
    }

    public AgentSummary findFirstBySellerIdPcdIdBetweenStatisticMonthEndMonth(int sellerId, int pcdId, String date) {
        String sql = "select * from t_agent_summary " +
                " where seller_id=? and pcd_id=? and statistic_month<=? and end_month>?";
        return findFirst(sql, sellerId, pcdId, date, date);
    }
}
