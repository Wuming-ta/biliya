/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.google.common.collect.Maps;
import com.jfeat.identity.model.User;
import com.jfeat.kit.SqlQuery;
import com.jfeat.partner.model.base.AgentBase;
import com.jfeat.pcd.model.Pcd;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@TableBind(tableName = "t_agent")
public class Agent extends AgentBase<Agent> {

    private static final String AGENT_PCD_QUALIFY = "t_agent_pcd_qualify";
    private static final String PCD_QUALIFY_ID = "pcd_qualify_id";
    private static final String AGENT_ID = "agent_id";
    private static final String PHYSICAL_SETTLEMENT_PERCENTAGE = "physical_settlement_percentage";

    public static final int PROVINCE_AGENT = 1;
    public static final int CITY_AGENT = 2;
    public static final int DISTRICT_AGENT = 3;

    /**
     * Only use for query.
     */
    public static Agent dao = new Agent();

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public Long queryAgentCountTotal() {
        SqlQuery query = new SqlQuery().select("Count(*)").from(getTableName());
        return Db.queryLong(query.sql());
    }

    public Long queryAgentCount(String type) {
        String sql = "select count(*) from t_pcd_qualify pq " +
                "join t_pcd p on p.id=pq.pcd_id " +
                "join t_agent_pcd_qualify apq on apq.pcd_qualify_id=pq.id " +
                "where p.type=?";
        return Db.queryLong(sql, type);
    }

    public List<Record> getAgentAreaList() {
        return getAgentAreaList(null);
    }

    public List<Record> getAgentProvinces() {
        return getAgentAreaList(Pcd.PROVINCE);
    }

    public List<Record> getAgentCities() {
        return getAgentAreaList(Pcd.CITY);
    }

    public List<Record> getAgentDistricts() {
        return getAgentAreaList(Pcd.DISTRICT);
    }

    private List<Record> getAgentAreaList(String type) {
        List<Object> params = new ArrayList<>();
        StringBuilder sql = new StringBuilder("select pq.*, p.name as pcd_name, p.type as pcd_type, apq.physical_settlement_percentage as agent_physical_settlement_percentage " +
                "from t_pcd_qualify pq " +
                "join t_pcd p on p.id=pq.pcd_id " +
                "join t_agent_pcd_qualify apq on apq.pcd_qualify_id=pq.id " +
                "where apq.agent_id=? ");
        params.add(getId());
        if (StrKit.notBlank(type)) {
            sql.append(" and p.type=?");
            params.add(type);
        }
        ;
        return Db.find(sql.toString(), params.toArray());
    }

    public Agent findByPcdId(int pcdId) {
        StringBuilder sql = new StringBuilder();
        sql.append("select a.* from t_agent a ");
        sql.append(" join t_agent_pcd_qualify apq on a.id=apq.agent_id ");
        sql.append(" join t_pcd_qualify pq on pq.id=apq.pcd_qualify_id ");
        sql.append(" where pq.pcd_id=?");
        return findFirst(sql.toString(), pcdId);
    }

    public Agent findByUserId(Integer userId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.USER_ID.eq("?"));
        return findFirst(query.sql(), userId);
    }

    /**
     * 返回不是代理商的用户列表
     *
     * @param pageNumber
     * @param pageSize
     * @param userName
     * @return
     */
    public Page<User> paginateNonAgentUser(int pageNumber, int pageSize, String userName) {
        List<Object> params = new ArrayList<>();
        String select = "select u.*";
        StringBuilder query = new StringBuilder("from t_user u left join t_agent a on u.id=a.user_id where a.id is null ");
        if (StrKit.notBlank(userName)) {
            query.append("and u.name like ?");
            params.add("%" + userName + "%");
        }
        return User.dao.paginate(pageNumber, pageSize, select, query.toString(), params.toArray());
    }

    public Page<Agent> paginate(int pageNumber, int pageSize, Integer agentId, String userName) {
        List<Object> params = new ArrayList<>();
        String select = "select a.*,u.name as user_name ";
        StringBuilder query = new StringBuilder();
        query.append("from t_pcd_qualify pcd_q " +
                "join t_agent_pcd_qualify apcd on apcd.pcd_qualify_id=pcd_q.id " +
                "join t_agent a on a.id=apcd.agent_id " +
                "join t_user u on u.id=a.user_id ");
        String cond = " where ";
        if (agentId != null) {
            query.append(cond);
            query.append("a.id=?");
            params.add(agentId);
            cond = " or ";
        }
        if (StrKit.notBlank(userName)) {
            query.append(cond);
            query.append("u.name like ?");
            params.add("%" + userName + "%");
        }

        query.append(" group by a.id,a.user_id");

        return paginate(pageNumber, pageSize, select, query.toString(), params.toArray());
    }

    private Map<Integer, Integer> levelPercentageMap = Maps.newLinkedHashMap();

    /**
     * @param pcdId
     * @return
     * @throws RuntimeException 要求该agent在t_agent_pcd_qualify表中有相应的记录，否则抛异常
     */
    public Double getPercentage(int pcdId) {
        String sql = "select pq.*,apq.physical_settlement_percentage as agent_physical_settlement_percentage from t_pcd_qualify pq " +
                " join t_agent_pcd_qualify apq on apq.pcd_qualify_id=pq.id" +
                " where apq.agent_id=? and pq.pcd_id=?";
        Record record = Db.findFirst(sql, getId(), pcdId);
        if (record == null) {
            logger.error("agentId: {} is not a agent of pcdId: {}", getId(), pcdId);
            throw new RuntimeException(String.format("agentId: %s is not a agent of pcdId: %s", getId(), pcdId));
        }
        Integer percentage = record.getInt("agent_physical_settlement_percentage");
        if (percentage == null) {
            percentage = record.get(PcdQualify.Fields.PHYSICAL_SETTLEMENT_PERCENTAGE.toString());
        }
        if (percentage == null) {
            int level = getLevel(pcdId);
            if (levelPercentageMap.get(level) == null) {
                SettlementProportion sp = SettlementProportion.dao.findByTypeLevel(SettlementProportion.Type.PHYSICAL_AGENT, level);
                if (sp.getProportionObject().getValue() != null) {
                    levelPercentageMap.put(level, sp.getProportionObject().getValue().intValue());
                }
            }
            percentage = levelPercentageMap.get(level);
        }
        return percentage == null ? percentage : percentage.doubleValue();
    }

    /**
     * 返回某个地区 对应SettlementProportion的level
     *
     * @param pcdId
     * @return
     */
    private int getLevel(int pcdId) {
        String type = Pcd.dao.findById(pcdId).getType();
        int level = 0;
        if (type.equals(Pcd.PROVINCE)) {
            level = SettlementProportion.Level.PROVINCE_PHYSICAL_AGENT.getValue();
        } else if (type.equals(Pcd.CITY)) {
            level = SettlementProportion.Level.CITY_PHYSICAL_AGENT.getValue();
        }
        if (type.equals(Pcd.DISTRICT)) {
            level = SettlementProportion.Level.DISTRICT_PHYSICAL_AGENT.getValue();
        }
        return level;
    }

    /**
     * 找出所有线下代理
     *
     * @return
     */
    public List<Agent> findAllPhysicalAgents() {
        String sql = "select * from t_agent as a" +
                " join t_seller as b on a.user_id=b.user_id" +
                " join t_physical_seller as c on b.id=c.seller_id";
        return find(sql);
    }

}
