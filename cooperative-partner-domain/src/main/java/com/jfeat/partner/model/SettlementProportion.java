/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.jfeat.kit.JsonKit;
import com.jfeat.kit.SqlQuery;
import com.jfeat.partner.model.base.SettlementProportionBase;
import com.jfinal.ext.plugin.tablebind.TableBind;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 各部门拥金分成配置
 */
@TableBind(tableName = "t_settlement_proportion")
public class SettlementProportion extends SettlementProportionBase<SettlementProportion> {

    /**
     * Only use for query.
     */
    public static SettlementProportion dao = new SettlementProportion();

    public enum Type {
        PLATFORM,
        PARTNER,
        AGENT,
        PHYSICAL_AGENT,
        SELLER,
        SELF,
        CROWN,
        PHYSICAL_CROWN,
        COPARTNER
    }

    public enum Level {
        PROVINCE_PHYSICAL_AGENT(1),
        CITY_PHYSICAL_AGENT(2),
        DISTRICT_PHYSICAL_AGENT(3);
        private int value;

        private Level(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    /**
     * 当安装比例分成的时候，可以使用利润或者销售金额计算
      */
    public enum SettlementType {
        // 利润
        PROFIT,
        // 销售金额
        SALES_AMOUNT
    }

    public Proportion getProportionObject() {
        return new Proportion(getProportion());
    }

    public SettlementProportion findBySelf() {
        return findByType(Type.SELF).get(0);
    }

    public SettlementProportion findByCrown() {
        return findByType(Type.CROWN).get(0);
    }

    public SettlementProportion findByCopartner() {
        return findByType(Type.COPARTNER).get(0);
    }


    /**
     * have and only have one platform proportion
     *
     * @return
     */
    public SettlementProportion findByPlatform() {
        return findByType(Type.PLATFORM).get(0);
    }

    /**
     * have and only have one partner proportion
     *
     * @return
     */
    public SettlementProportion findByPartner(int level) {
        return findByTypeLevel(Type.PARTNER, level);
    }

    /**
     * there are three levels agent.
     *
     * @param level >= 1
     * @return
     */
    public SettlementProportion findByAgent(int level) {
        return findByTypeLevel(Type.AGENT, level);
    }

    /**
     * there are more than one seller.
     * It is defined on t_merchant_options
     *
     * @param level >= 1
     * @return
     */
    public SettlementProportion findBySeller(int level) {
        return findByTypeLevel(Type.SELLER, level);
    }

    public SettlementProportion findByPhysicalCrown(int level) {
        return findByTypeLevel(Type.PHYSICAL_CROWN, level);
    }

    public SettlementProportion findByTypeLevel(Type type, int level) {
        SqlQuery query = new SqlQuery().from(getTableName()).where(Fields.TYPE.eq("?")).and(Fields.LEVEL.eq("?"));
        return findFirst(query.sql(), type.toString(), level);
    }

    public List<SettlementProportion> findByType(Type type) {
        SqlQuery query = new SqlQuery().from(getTableName()).where(Fields.TYPE.eq("?")).orderBy(Fields.LEVEL.toString());
        return find(query.sql(), type.toString());
    }

    public static class Proportion {
        private static final String PERCENTAGE = "percentage";
        private static final String FIXEDVALUE = "fixedvalue";
        private static final String VALUE = "value";
        private static final String SETTLEMENTTYPE = "settlementtype";

        private int settlementProportionId;
        private Map<String, Object> map;

        public int getSettlementProportionId() {
            return settlementProportionId;
        }

        public void setSettlementProportionId(int settlementProportionId) {
            this.settlementProportionId = settlementProportionId;
        }

        public void setSettlementtype(String settlementtype) {
            map.put(SETTLEMENTTYPE, settlementtype);
        }

        public String getSettlementtype() {
            if (map.get(SETTLEMENTTYPE) == null) {
                return SettlementType.PROFIT.toString();
            }
            return (String) map.get(SETTLEMENTTYPE);
        }

        public boolean isPercentage() {
            if (map.get(PERCENTAGE) != null) {
                return (boolean) map.get(PERCENTAGE);
            }
            return false;
        }

        public void setPercentage(boolean percentage) {
            map.put(PERCENTAGE, percentage);
        }

        public boolean isFixedvalue() {
            if (map.get(FIXEDVALUE) != null) {
                return (boolean) map.get(FIXEDVALUE);
            }
            return false;
        }

        public void setFixedvalue(boolean fixedvalue) {
            map.put(FIXEDVALUE, fixedvalue);
        }

        public Double getValue() {
            return (Double) map.get(VALUE);
        }

        public void setValue(Double value) {
            map.put(VALUE, value);
        }

        public Double getValue(Integer id) {
            return (Double) map.get(id + "");
        }

        public void setValue(Integer id, Double value) {
            map.put(id + "", value);
        }

        public Proportion(String json) {
            try {
                map = JsonKit.convertToMap(json);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public Proportion() {
            map = new HashMap<>();
        }

        @Override
        public String toString() {
            return com.jfinal.kit.JsonKit.toJson(map);
        }
    }
}
