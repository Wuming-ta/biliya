/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.jfeat.kit.SqlQuery;
import com.jfeat.partner.model.base.PhysicalPurchaseSummaryBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.plugin.activerecord.Db;

import java.math.BigDecimal;
import java.util.List;

@TableBind(tableName = "t_physical_purchase_summary")
public class PhysicalPurchaseSummary extends PhysicalPurchaseSummaryBase<PhysicalPurchaseSummary> {

    /**
     * Only use for query.
     */
    public static PhysicalPurchaseSummary dao = new PhysicalPurchaseSummary();

    public static final Integer TRANSFERRED = 1;
    public static final Integer UN_TRANSFERRED = 0;

    public List<PhysicalPurchaseSummary> findBySellerId(int sellerId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.SELLER_ID.eq("?"));
        query.orderBy(Fields.STATISTIC_MONTH.toString());
        return find(query.sql(), sellerId);
    }

    /**
     * @param sellerId
     * @param month    yyyy-mm-dd
     * @return
     */
    public PhysicalPurchaseSummary findBySellerIdAndMonth(int sellerId, String month) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.SELLER_ID.eq("?"));
        query.and(Fields.STATISTIC_MONTH.eq("?"));
        return findFirst(query.sql(), sellerId, month);
    }


    public BigDecimal queryTotalAmount(int sellerId) {
        Number result = Db.queryNumber("select sum(monthly_amount) from t_physical_purchase_summary where seller_id=?", sellerId);
        return result == null ? BigDecimal.ZERO : BigDecimal.valueOf(result.doubleValue());
    }

    public BigDecimal queryTotalSettledAmount(int sellerId) {
        Number result = Db.queryNumber("select sum(monthly_settled_amount) from t_physical_purchase_summary where seller_id=?", sellerId);
        return result == null ? BigDecimal.ZERO : BigDecimal.valueOf(result.doubleValue());
    }

    public List<PhysicalPurchaseSummary> findByParentSellerIdAndMonth(int sellerId, String month) {
        String sql = "select u.name as user_name, u.uid, u.avatar, p.* from t_physical_purchase_summary p " +
                "join t_seller s on s.id=p.seller_id " +
                "join t_physical_seller ps on ps.seller_id=p.seller_id " +
                "join t_user u on u.id=s.user_id " +
                "where ps.parent_seller_id=? and p.statistic_month=?";
        return find(sql, sellerId, month);
    }

}
