/*
 *   Copyright (C) 2014-2018 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.jfeat.partner.model.base.CopartnerBase;
import com.jfeat.partner.model.param.CopartnerParam;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfeat.partner.model.Seller;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_copartner")
public class Copartner extends CopartnerBase<Copartner> {

    /**
     * Only use for query.
     */
    public static Copartner dao = new Copartner();

    public enum Status {
        NORMAL,
        BLOCKED
    }

    public Copartner findBySellerId(Integer sellerId) {
        return findFirstByField(Fields.SELLER_ID.toString(), sellerId);
    }

    /**
     * 根据团队成员的ID返回合伙人
     * @param childSellerId
     * @return
     */
    public Copartner findByChildId(Integer childSellerId) {
        String sql = "select c.* from t_copartner c join t_copartner_relation cr on c.id = cr.copartner_id where cr.seller_id = ?";
        return findFirst(sql, childSellerId);
    }

    public Seller getSeller() {
        return Seller.dao.findById(getSellerId());
    }


    public List<Seller> getChildren() {
        String sql = "select s.*, s.id as seller_id, cr.create_time, u.name as user_name, u.uid, u.avatar, u.followed, u.follow_time, u.real_name, u.phone " +
                "from t_seller s " +
                "join t_user u on u.id = s.user_id " +
                "join t_copartner_relation cr on cr.seller_id = s.id " +
                "where cr.copartner_id = ?";
        return Seller.dao.find(sql, getId());
    }

    public boolean isChild(Integer childSellerId) {
        return Db.queryNumber("select count(1) from t_copartner_relation where copartner_id = ? and seller_id = ?", getId(), childSellerId).intValue() > 0;
    }

    public boolean addChildren(Integer childSellerId) {
        Record record = new Record();
        record.set("copartner_id", getId());
        record.set("seller_id", childSellerId);
        record.set("create_time", new Date());
        return Db.save("t_copartner_relation", record);
    }

    public Page<Copartner> paginate(CopartnerParam copartnerParam) {
        String select = "select c.*, u.name as user_name, u.uid, u.avatar, u.followed, u.follow_time, u.real_name, u.phone ";
        StringBuilder query = new StringBuilder("from t_copartner c join t_seller s on s.id = c.seller_id ");
        query.append("join t_user u on u.id = s.user_id where 1 = 1 ");
        String cond = " and ";
        List<Object> params = new ArrayList<>();
        if (StrKit.notBlank(copartnerParam.getName())) {
            query.append(cond).append("u.real_name like ?");
            params.add(copartnerParam.getName() + "%");
        }
        if (StrKit.notBlank(copartnerParam.getStatus())) {
            query.append(cond).append("c.status = ?");
            params.add(copartnerParam.getStatus());
        }

        query.append(" order by c.id desc ");
        return super.paginate(copartnerParam.getPageNumber(), copartnerParam.getPageSize(), select, query.toString(), params.toArray());
    }
}
