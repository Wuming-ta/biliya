/*
 *   Copyright (C) 2014-2019 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.partner.model;

import com.jfeat.identity.model.User;
import com.jfeat.partner.model.base.AllianceBase;
import com.jfinal.ext.plugin.tablebind.TableBind;

import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_alliance")
public class Alliance extends AllianceBase<Alliance> {

    /**
     * Only use for query.
     */
    public static Alliance dao = new Alliance();

    /**
     *      * status_code = 0  是盟友
     *      * status_code = 1  不是盟友/没记录
     *      * status_code = 2  待付款/申请中
     *      * status_code = 3  已付款/待绑定
     *      * status_code = 4  支付超时
     *      * status_code = 5  状态错误
     */
    public enum AllianceShip {
        REGULAR(0),
        NO(1),
        TEMP(2);
        private int value;
        AllianceShip(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }
    }

    public enum StockholderShip {
        NO(0),
        YES(1);
        private int value;
        StockholderShip(int value) {
            this.value = value;
        }
        public int getValue() {
            return this.value;
        }
    }

    public boolean isStockholder() {
        return  this.getStockholderShip() == StockholderShip.YES.getValue();
    }

    public boolean isRegularAlliance() {
        return this.getAllianceShip() == AllianceShip.REGULAR.getValue();
    }

    public boolean isTempAlliance() {
        return this.getAllianceShip() == AllianceShip.TEMP.getValue();
    }

    @Override
    public boolean save() {
        setCreationTime(new Date());
        if (getAllianceShip() == null) {
            setAllianceShip(AllianceShip.NO.getValue());
        }
        if (getAllianceShip() == AllianceShip.REGULAR.getValue()) {
            setAllianceShipTime(new Date());
        }
        return super.save();
    }

    public Alliance findByUserId(Integer userId) {
        return findFirstByField(Fields.USER_ID.toString(), userId);
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    /**
     * 返回当前盟友的邀请列表
     * @return
     */
    public List<Alliance> getChildren() {
        String sql = "select u.name as user_name, u.avatar as user_avatar, u.phone as user_phone, a.* " +
                "from t_alliance a join t_user u on a.user_id = u.id " +
                "where a.invitor_alliance_id = ?";
        return find(sql, getId());
    }
}
