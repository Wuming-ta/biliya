/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.config.model;

import com.jfeat.config.model.base.ConfigBase;
import com.jfeat.kit.SqlQuery;
import com.jfinal.ext.plugin.tablebind.TableBind;

import java.util.List;

@TableBind(tableName = "t_config")
public class Config extends ConfigBase<Config> {

    /**
     * Only use for query.
     */
    public static Config dao = new Config();

    public enum ValueType {
        INT("int"),
        FLOAT("float"),
        STRING("String"),
        BOOLEAN("boolean"),
        JSON("json"),
        TEXT("text"),
        PASSWORD("password");
        private String type;

        ValueType(String type) {
            this.type = type;
        }

        public String getType() {
            return type;
        }
    }

    public enum Visible {
        YES(1),
        NO(0);
        private int value;

        Visible(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }
    }

    public Config findByKey(String key) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.KEY_NAME.eq("?"));
        return findFirst(query.sql(), key);
    }

    public List<Config> findByGroupId(int groupId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.GROUP_ID.eq("?"));
        List<Config> list = find(query.sql(), groupId);
        return list;
    }

    public List<Config> findBySys() {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.TYPE.eq("?"));
        return find(query.sql(), "sys");
    }

    public Integer getValueToInt() {
        if (!getValueType().equalsIgnoreCase(ValueType.INT.getType())) {
            return null;
        }
        return Integer.valueOf(getValue());
    }

    public Boolean getValueToBoolean() {
        if (!getValueType().equalsIgnoreCase(ValueType.BOOLEAN.getType())) {
            return null;
        }
        return Boolean.valueOf(getValue());
    }

    public Float getValueToFloat() {
        if (!getValueType().equalsIgnoreCase(ValueType.FLOAT.getType())) {
            return null;
        }
        return Float.valueOf(getValue());
    }

    public String getValueToStr() {
        if (!(getValueType().equalsIgnoreCase(ValueType.STRING.getType())
                || getValueType().equalsIgnoreCase(ValueType.JSON.getType())
                || getValueType().equalsIgnoreCase(ValueType.TEXT.getType())
                ||getValueType().equalsIgnoreCase(ValueType.PASSWORD.getType()))) {
            return null;
        }
        return getValue();
    }
}
