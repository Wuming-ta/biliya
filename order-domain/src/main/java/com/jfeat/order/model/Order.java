/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.order.model;

import com.google.common.collect.Lists;
import com.jfeat.identity.model.User;
import com.jfeat.kit.SqlQuery;
import com.jfeat.order.model.base.OrderBase;
import com.jfeat.order.model.param.OrderParam;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_order")
public class Order extends OrderBase<Order> {

    public enum PaymentType {
        WECHAT, //微信支付
        POINT,  //积分支付
        STORE,  //线下支付
        WALLET, //零钱钱包
        CASH, // 现金
        ALIPAY, //支付宝
        CARD //银行卡
    }

    public static final int EVENT_ORDER_CLOSED = 100;
    public static final int EVENT_ORDER_PAID = 101;
    public static final int EVENT_ORDER_REFUNDED = 102;
    public static final int EVENT_ORDER_DELIVERING = 103;
    public static final int EVENT_ORDER_DELIVER_PENDING = 104;
    public static final int EVENT_ORDER_DELIVERED_CONFIRM_PENDING = 105;

    /**
     * 订单是否已经分成结算。未分成的订单不能删掉。
     */
    public static final int SETTLED = 1; // 已分成
    public static final int UNSETTLED = 0; // 未分成

    public static final int DELIVER_REMINDER = 1;
    public static final int NOT_DELIVER_REMINDER = 0;

    public static final int FAKE_DELETED = 1;
    public static final int UN_DELETED = 0;


    public enum Type {
        ORDER, //线上订单
        STORE_ORDER  //门店订单
    }

    /**
     * 订单配送方式
     */
    public enum DeliveryType {
        // 快递
        EXPRESS,
        // 自提
        SELF_PICK,
        //极速送达
        FLASH
    }

    /**
     * 订单来源
     */
    public enum Origin {
        //微信公众号(Wechat public account)
        WPA,
        //小程序
        MINI_PROGRAM,
        //手机应用程序
        APP_ANDROID,
        APP_IOS,
        IPAD,
        //其他
        OTHER
    }

    /**
     * Only use for query.
     */
    public static Order dao = new Order();

    public enum Status {
        CREATED_PAY_PENDING { //待支付

            @Override
            public boolean transfer(Status status) {
                return status == CREATED_PAY_PENDING
                        || status == CLOSED_PAY_TIMEOUT
                        || status == CLOSED_CANCELED
                        || status == PAID_CONFIRM_PENDING
                        //创建未支付即可马上完成的订单是门店订单，这种订单在门店这边已经支付了，没有发货过程，可以直接完成
                        || status == DELIVERING
                        || status == DELIVERED_CONFIRM_PENDING;
            }

            @Override
            public String toChineseName() {
                return "待支付";
            }
        },

        CLOSED_PAY_TIMEOUT { //支付超时关闭

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "支付超时关闭";
            }
        },

        CLOSED_CANCELED { //已取消

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "已取消";
            }
        },

        // 已支付（配送方式为“快递”时，此状态相当于已支付，配送方式为“自提”或“极速送达”时，此状态相当于待处理）
        // 对于 试用装，从已支付可以进入 关闭状态 （拒绝申请的情况）
        PAID_CONFIRM_PENDING {

            @Override
            public boolean transfer(Status status) {
                return status == CONFIRMED_PICK_PENDING
                        || status == CONFIRMED_DELIVER_PENDING
                        || status == CANCELED_REFUND_PENDING
                        || status == CLOSED_CANCELED
                        || status == PAID_CONFIRM_PENDING
                        || status == DELIVERING
                        || status == DELIVERED_CONFIRM_PENDING;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                if (order.getConfirmDate() == null) {
                    order.setConfirmDate(new Date());
                }
                order.setPayDate(new Date());
                return true;
            }

            @Override
            public String toChineseName() {
                return "已支付";
            }
        },

        CONFIRMED_DELIVER_PENDING { //待发货

            @Override
            public boolean transfer(Status status) {
                return status == CONFIRMED_DELIVER_PENDING
                        || status == DELIVERING
                        || status == DELIVERED_CONFIRM_PENDING
                        || status == CANCELED_REFUND_PENDING;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                if (order.getConfirmDate() == null) {
                    order.setConfirmDate(new Date());
                }
                return true;
            }

            @Override
            public String toChineseName() {
                return "待发货";
            }
        },


        /*
            DELIVERING表示已经通知快递了；DELIVERED_CONFIRM_PENDING表示快递已经投递了。
            由于目前还没有和快递端对接，所以DELIVERED_CONFIRM_PENDING是一样的，都是发货了。
            因此订单发货时发送通知，只需要处理DELIVERING的通知即可
         */
        DELIVERING { //发货中

            @Override
            public boolean transfer(Status status) {
                return status == DELIVERING
                        || status == DELIVERED_CONFIRM_PENDING
                        || status == CANCELED_RETURN_PENDING
                        || status == CANCELED_REFUND_PENDING;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                if (order.getDeliverDate() == null) {
                    order.setDeliverDate(new Date());
                }
                return true;
            }

            @Override
            public String toChineseName() {
                return "发货中";
            }
        },

        DELIVERED_CONFIRM_PENDING { //已发货

            @Override
            public boolean transfer(Status status) {
                return status == DELIVERED_CONFIRM_PENDING
                        || status == CLOSED_CONFIRMED
                        || status == CANCELED_RETURN_PENDING
                        || status == CANCELED_REFUND_PENDING;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                if (order.getDeliveredDate() == null) {
                    order.setDeliveredDate(new Date());
                }
                if (order.getDeliverDate() == null) {
                    order.setDeliverDate(new Date());
                }
                order.setIsDeliverReminder(NOT_DELIVER_REMINDER);
                return true;
            }

            @Override
            public String toChineseName() {
                return "已发货";
            }
        },

        CANCELED_RETURN_PENDING { //待退货

            @Override
            public boolean transfer(Status status) {
                return status == CANCELED_RETURN_PENDING
                        || status == CANCELED_REFUND_PENDING
                        || status == DELIVERED_CONFIRM_PENDING
                        || status == CLOSED_REFUNDED; // 线下门店的退货，直接变为已退款
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "待退货";
            }
        },

        CLOSED_CONFIRMED { //已确认收货

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                order.setDealDate(new Date());
                return true;
            }

            @Override
            public String toChineseName() {
                return "已确认收货";
            }
        },

        CANCELED_REFUND_PENDING {  //待退款

            @Override
            public boolean transfer(Status status) {
                return status == CANCELED_RETURN_PENDING
                        || status == CLOSED_REFUNDED
                        || status == DELIVERED_CONFIRM_PENDING
                        || status == CONFIRMED_DELIVER_PENDING;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "待退款";
            }
        },

        CLOSED_REFUNDED { //已退款

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "已退款";
            }
        },

        CONFIRMED_PICK_PENDING { //待取货（对于自提的方式，用户下单并支付之后，店员在ipad端“受理”该订单，则变为“待取货”）

            @Override
            public boolean transfer(Status status) {
                return status == DELIVERING || status == CLOSED_CONFIRMED || status == CLOSED_CANCELED;
            }

            @Override
            public boolean handle(Order order) {
                order.setStatus(this.toString());
                return true;
            }

            @Override
            public String toChineseName() {
                return "待取货";
            }
        };


        public boolean transfer(Status status) {
            return false;
        }

        public boolean handle(Order order) {
            return true;
        }

        public String toChineseName() {
            return this.toString();
        }
    }

    public enum StoreOrderStatus {
        CLOSED_CANCELED, //取消
        CLOSED_CONFIRMED, //已完成
        CLOSED_REFUNDED,  //已退货
        CLOSED_EXCHANGED,  //已换货
    }

    private List<OrderItem> orderItems = new ArrayList<>();

    public String[] fieldsToArray() {
        List<String> fields = new ArrayList<>();
        for (Fields field : Fields.values()) {
            fields.add(field.toString());
        }
        return fields.toArray(new String[fields.size()]);
    }

    public Order findByOrderNumber(String orderNumber) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.ORDER_NUMBER.eq("?"));
        return findFirst(query.sql(), orderNumber);
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public String getAddress() {
        StringBuilder builder = new StringBuilder();
        builder.append(getProvince());
        builder.append(getCity());
        builder.append(getDistrict());
        if (getStreet() != null) {
            builder.append(getStreet());
        }
        builder.append(getDetail());
        return builder.toString();
    }

    public List<OrderCustomerService> getOrderCustomerService() {
        return OrderCustomerService.dao.findByOrderId(getId());
    }

    public List<OrderExpress> getOrderExpressList() {
        return OrderExpress.dao.findByOrderId(getId());
    }

    public void setOrderItems(List<OrderItem> orderItems) {
        this.orderItems = orderItems;
    }

    public List<OrderItem> getOrderItems() {
        if (orderItems.isEmpty()) {
            orderItems = OrderItem.dao.findByOrderId(getId());
        }
        return orderItems;
    }

    /**
     * 查询的订单总金额
     * @return
     */
    public double queryOrderTotalPrice(OrderParam orderParam) {
        StringBuilder sql = new StringBuilder("select sum(total_price) from t_order where 1=1 ");
        List<Object> param = new ArrayList<>();

        if (orderParam.getShowDeleted() == null) {
            sql.append(" and is_deleted = ?");
            param.add(UN_DELETED);
        }

        if (StrKit.notBlank(orderParam.getStoreId())) {
            sql.append(" and store_id = ? ");
            param.add(orderParam.getStoreId());
        }
        if (orderParam.getUserId() != null) {
            sql.append(" and user_id = ? ");
            param.add(orderParam.getUserId());
        }

        String type = orderParam.getType();
        if (StrKit.notBlank(type)) {
            sql.append(" and type = ? ");
            param.add(type);
        }
        String paymentType = orderParam.getPaymentType();
        if (StrKit.notBlank(paymentType)) {
            sql.append(" and payment_type = ? ");
            param.add(paymentType);
        }
        String deliveryType = orderParam.getDeliveryType();
        if (StrKit.notBlank(deliveryType)) {
            sql.append(" and delivery_type = ? ");
            param.add(deliveryType);
        }
        String orderNumber = orderParam.getOrderNumber();
        if (StrKit.notBlank(orderNumber)) {
            sql.append("and order_number like ? ");
            param.add("%" + orderNumber + "%");
        }
        String contactUser = orderParam.getContactUser();
        if (StrKit.notBlank(contactUser)) {
            sql.append("and contact_user like ? ");
            param.add(contactUser + "%");
        }
        String phone = orderParam.getPhone();
        if (StrKit.notBlank(phone)) {
            sql.append("and phone = ? ");
            param.add(phone);
        }
        String startTime = orderParam.getStartTime();
        if (StrKit.notBlank(startTime)) {
            sql.append("and created_date >= ? ");
            param.add(startTime);
        }
        String endTime = orderParam.getEndTime();
        if (StrKit.notBlank(endTime)) {
            sql.append("and created_date >= ? ");
            param.add(endTime);
        }

        String search = orderParam.getSearch();
        if (StrKit.notBlank(search)) {
            sql.append(" and ( ");
            sql.append("order_number like ? or contact_user like ? or phone like ?");
            sql.append(" ) ");
            param.add("%" + search + "%");
            param.add(search + "%");
            param.add(search + "%");
        }

        if (orderParam.getStatuses() != null && orderParam.getStatuses().length > 0) {
            sql.append(" and ( ");
            String cond = "";
            for (String status : orderParam.getStatuses()){
                sql.append(cond).append(" status = ? ");
                param.add(status);
                cond = " or ";
            }
            sql.append(" ) ");
        }
        Number result = Db.queryNumber(sql.toString(), param.toArray());
        if (result != null) {
            return result.doubleValue();
        }
        return 0;
    }

    /**
     * 根据状态返回某用户的订单数
     * @return
     */
    public long countOrderByCond(OrderParam orderParam) {
        StringBuilder sql = new StringBuilder("select count(*) from t_order where 1=1 ");
        List<Object> param = new ArrayList<>();

        if (orderParam.getShowDeleted() == null) {
            sql.append(" and is_deleted = ?");
            param.add(UN_DELETED);
        }

        if (StrKit.notBlank(orderParam.getStoreId())) {
            sql.append(" and store_id = ? ");
            param.add(orderParam.getStoreId());
        }

        if (orderParam.getUserId() != null) {
            sql.append(" and user_id = ? ");
            param.add(orderParam.getUserId());
        }
        String type = orderParam.getType();
        if (StrKit.notBlank(type)) {
            sql.append(" and type = ? ");
            param.add(type);
        }
        String paymentType = orderParam.getPaymentType();
        if (StrKit.notBlank(paymentType)) {
            sql.append(" and payment_type = ? ");
            param.add(paymentType);
        }
        String deliveryType = orderParam.getDeliveryType();
        if (StrKit.notBlank(deliveryType)) {
            sql.append(" and delivery_type = ? ");
            param.add(deliveryType);
        }
        String orderNumber = orderParam.getOrderNumber();
        if (StrKit.notBlank(orderNumber)) {
            sql.append("and order_number like ? ");
            param.add("%" + orderNumber + "%");
        }
        String contactUser = orderParam.getContactUser();
        if (StrKit.notBlank(contactUser)) {
            sql.append("and contact_user like ? ");
            param.add(contactUser + "%");
        }
        String phone = orderParam.getPhone();
        if (StrKit.notBlank(phone)) {
            sql.append("and phone = ? ");
            param.add(phone);
        }
        String startTime = orderParam.getStartTime();
        if (StrKit.notBlank(startTime)) {
            sql.append("and created_date >= ? ");
            param.add(startTime);
        }
        String endTime = orderParam.getEndTime();
        if (StrKit.notBlank(endTime)) {
            sql.append("and created_date >= ? ");
            param.add(endTime);
        }

        String search = orderParam.getSearch();
        if (StrKit.notBlank(search)) {
            sql.append(" and ( ");
            sql.append("order_number like ? or contact_user like ? or phone like ?");
            sql.append(" ) ");
            param.add("%" + search + "%");
            param.add(search + "%");
            param.add(search + "%");
        }

        if (orderParam.getStatuses() != null && orderParam.getStatuses().length > 0) {
            sql.append(" and ( ");
            String cond = "";
            for (String status : orderParam.getStatuses()) {
                sql.append(cond).append(" status = ? ");
                param.add(status);
                cond = " or ";
            }
            sql.append(" ) ");
        }
        if (orderParam.getQueryMarketing() != null && !orderParam.getQueryMarketing()) {
            sql.append(" and marketing is null");
        }

        if (orderParam.getCommented() != null && orderParam.getCommented()) {
            sql.append(" and comment_id is not null ");
        }
        if (orderParam.getCommented() != null && !orderParam.getCommented()) {
            sql.append(" and comment_id is null ");
        }

        if (orderParam.getReminder() != null) {
            sql.append(" and is_deliver_reminder = ? ");
            param.add(orderParam.getReminder());
        }

        return Db.queryLong(sql.toString(), param.toArray());
    }

    /**
     * 查询某用某段时间内购买过某产品的数量
     *
     * @param productId
     * @param userId
     * @param startTime
     * @param endTime
     * @return
     */
    public long countHistoryBuyProduct(int productId, int userId, String startTime, String endTime) {
        List<Object> params = Lists.newArrayList();
        StringBuilder sql = new StringBuilder("select count(*) from t_order_item oi " +
                "join t_order o on o.id=oi.order_id " +
                "where o.user_id=? and oi.product_id=? ");
        params.add(userId);
        params.add(productId);

        if (StrKit.notBlank(startTime) && StrKit.notBlank(endTime)) {
            sql.append("and o.created_date>=? and o.created_date<=? ");
            params.add(startTime);
            params.add(endTime);
        }

        Status[] statuses = {
                Status.CREATED_PAY_PENDING,
                Status.DELIVERED_CONFIRM_PENDING,
                Status.PAID_CONFIRM_PENDING,
                Status.DELIVERING,
                Status.CLOSED_CONFIRMED,
                Status.CANCELED_REFUND_PENDING,
                Status.CANCELED_RETURN_PENDING,
                Status.CONFIRMED_DELIVER_PENDING
        };
        sql.append(" and ( ");
        String cond = "";
        for (Status status : statuses) {
            sql.append(cond);
            sql.append(" o.status=? ");
            params.add(status.toString());
            cond = " or ";
        }
        sql.append(" ) ");
        return Db.queryNumber(sql.toString(), params.toArray()).longValue();
    }

    public List<Order> find(Integer userId, String marketing, String startTime, String endTime) {
        String sql = "select * from t_order where user_id=? and marketing=? and pay_date between ? and ?";
        return find(sql, userId, marketing, startTime, endTime);
    }

    /**
     * 查询某用户某段时间内买过的总金额
     */
    public double countHistoryTotalPriceSum(int userId, String marketing, String startTime, String endTime) {
        List<Object> params = Lists.newArrayList();
        StringBuilder sql = new StringBuilder("select ifnull(sum(total_price),0) from t_order where user_id=? and pay_date between ? and ?");
        params.add(userId);
        params.add(startTime);
        params.add(endTime);

        if (StrKit.notBlank(marketing)) {
            sql.append(" and ").append(" marketing=? ");
            params.add(marketing);
        } else {
            sql.append(" and ").append(" marketing is null");
        }

        Status[] statuses = {
                Status.DELIVERED_CONFIRM_PENDING,
                Status.PAID_CONFIRM_PENDING,
                Status.DELIVERING,
                Status.CLOSED_CONFIRMED,
                Status.CONFIRMED_DELIVER_PENDING
        };
        sql.append(" and ( ");
        String cond = "";
        for (Status status : statuses) {
            sql.append(cond);
            sql.append(" status=? ");
            params.add(status.toString());
            cond = " or ";
        }
        sql.append(" ) ");

        return Db.queryNumber(sql.toString(), params.toArray()).doubleValue();
    }

    public List<Order> findConfirmTimeoutOrder(String time) {
        String sql = "select * from t_order where status=? and deliver_date<=?";
        return find(sql, Status.DELIVERED_CONFIRM_PENDING.toString(), time);
    }

    public List<Order> findReturnTimeoutOrder(String time) {
        String sql = "select * from t_order where status=? and settled=? and deal_date<=?";
        return find(sql, Status.CLOSED_CONFIRMED.toString(), UNSETTLED, time);
    }

    public BigDecimal statisticTotalPriceFromDealtOrder(String startTime, String endTime) {
        String sql = "select sum(total_price) from t_order where status=? and deal_date>=? and deal_date<=?";
        Number number = Db.queryNumber(sql, Status.CLOSED_CONFIRMED.toString(), startTime, endTime);
        if (number != null) {
            return BigDecimal.valueOf(number.doubleValue());
        }
        return BigDecimal.ZERO;
    }

    public Page<Order> paginateReturnRefundOrder(int pageNumber, int pageSize, String type, Integer userId) {
        String[] statuses = {
                Status.CANCELED_REFUND_PENDING.toString(),
                Status.CANCELED_RETURN_PENDING.toString(),
                Status.CLOSED_REFUNDED.toString()
        };
        return paginate(pageNumber, pageSize, type, userId, statuses);
    }

    public Page<Order> paginate(int pageNumber, int pageSize, String type, Integer userId, String[] statuses) {
        OrderParam orderParam = new OrderParam(pageNumber, pageSize);
        orderParam.setType(type)
                .setUserId(userId)
                .setStatuses(statuses);
        return paginate(orderParam);
    }

    public Page<Order> paginate(int pageNumber, int pageSize, String type, Integer userId, String status) {
        OrderParam orderParam = new OrderParam(pageNumber, pageSize);
        orderParam.setType(type)
                .setUserId(userId)
                .setStatus(status);
        return paginate(orderParam);
    }

    public Page<Order> paginate(OrderParam orderParam) {
        String select = "select o.*,u.name as user_name, u.phone as user_phone ";
        StringBuilder builder = new StringBuilder();
        builder.append("from t_order as o join t_user as u on u.id=o.user_id ");
        if (StrKit.notBlank(orderParam.getProductName()) || StrKit.notBlank(orderParam.getBarcode())) {
            builder.append("join t_order_item oi on o.id = oi.order_id ");
        }
        if (orderParam.getQueryReturnRefund() != null && orderParam.getQueryReturnRefund()) {
            builder.append("join t_order_customer_service ocs on ocs.order_id = o.id ");
        }
        String cond = " where 1=1 and ";
        List<Object> params = new ArrayList<>();

        if (orderParam.getShowDeleted() == null) {
            builder.append(cond);
            builder.append(" o.is_deleted = ? ");
            params.add(UN_DELETED);
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getType())) {
            builder.append(cond);
            builder.append("o.type=?");
            params.add(orderParam.getType());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getOrderNumber())) {
            builder.append(cond);
            builder.append("o.order_number like ?");
            params.add("%" + orderParam.getOrderNumber() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getStatus())) {
            builder.append(cond);
            builder.append("o.status=?");
            params.add(orderParam.getStatus());
            cond = " and ";
        }

        if (orderParam.getUserId() != null) {
            builder.append(cond);
            builder.append("o.user_id=?");
            params.add(orderParam.getUserId());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getContactUser())) {
            builder.append(cond);
            builder.append("o.contact_user like ?");
            params.add(orderParam.getContactUser() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getContactPhone())) {
            builder.append(cond);
            builder.append("o.phone=?");
            params.add(orderParam.getContactPhone());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getPhone())) {
            builder.append(cond);
            builder.append("o.phone=?");
            params.add(orderParam.getPhone());
            cond = " and ";
        }

        if (orderParam.getReminder() != null) {
            builder.append(cond);
            builder.append("o.is_deliver_reminder=?");
            params.add(orderParam.getReminder());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getPaymentType())) {
            builder.append(cond);
            builder.append("o.payment_type=?");
            params.add(orderParam.getPaymentType());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getDeliveryType())) {
            builder.append(cond);
            builder.append("o.delivery_type=?");
            params.add(orderParam.getDeliveryType());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getStartTime())) {
            builder.append(cond);
            builder.append("o.created_date>=?");
            params.add(orderParam.getStartTime());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getEndTime())) {
            builder.append(cond);
            builder.append("o.created_date<=?");
            params.add(orderParam.getEndTime());
            cond = " and ";
        }

        if (orderParam.getQueryMarketing() != null && orderParam.getQueryMarketing() && StrKit.notBlank(orderParam.getMarketing())) {
            builder.append(cond);
            builder.append("o.marketing=?");
            params.add(orderParam.getMarketing());
            cond = " and ";
        }

        if (orderParam.getQueryMarketing() != null && !orderParam.getQueryMarketing()) {
            builder.append(cond);
            builder.append("o.marketing is null");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getProductName())) {
            builder.append(cond);
            builder.append("oi.product_name like ?");
            params.add(orderParam.getProductName() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getBarcode())) {
            builder.append(cond);
            builder.append("oi.barcode like ?");
            params.add(orderParam.getBarcode() + "%");
            cond = " and ";
        }

        if (orderParam.getStatuses() != null && orderParam.getStatuses().length > 0) {
            builder.append(cond);
            builder.append(" ( ");
            cond = "";
            for (String status : orderParam.getStatuses()) {
                builder.append(cond);
                builder.append("o.status=?");
                params.add(status);
                cond = " or ";
            }
            builder.append(" ) ");
            cond = " and ";
        }

        if (orderParam.getOrderNumbers() != null && orderParam.getOrderNumbers().length > 0) {
            builder.append(cond);
            builder.append(" ( ");
            cond = "";
            for (String orderNumber : orderParam.getOrderNumbers()) {
                builder.append(cond);
                builder.append("o.order_number=?");
                params.add(orderNumber);
                cond = " or ";
            }
            builder.append(" ) ");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getStoreId())) {
            builder.append(cond);
            builder.append("o.store_id=?");
            params.add(orderParam.getStoreId());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getMname())) {
            builder.append(cond);
            builder.append("o.mname like ?");
            params.add(orderParam.getMname() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getSearch())) {
            builder.append(cond).append(" ( ");
            builder.append("o.order_number = ? or o.contact_user = ? or o.phone = ?");
            builder.append(" ) ");
            params.add(orderParam.getSearch());
            params.add(orderParam.getSearch());
            params.add(orderParam.getSearch());
            cond = " and ";
        }

        if (orderParam.getCommented() != null && orderParam.getCommented()) {
            builder.append(cond).append("o.comment_id is not null ");
            cond = " and ";
        }
        if (orderParam.getCommented() != null && !orderParam.getCommented()) {
            builder.append(cond).append("o.comment_id is null ");
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getStoreUserCode())) {
            builder.append(cond).append("o.store_user_code = ? ");
            params.add(orderParam.getStoreUserCode());
            cond = " and ";
        }

        if (StrKit.notBlank(orderParam.getSkuId())) {
            builder.append(cond).append("oi.sku_id = ?");
            params.add(orderParam.getSkuId());
            cond = " and ";
        }
        if (StrKit.notBlank(orderParam.getWarehouseId())) {
            builder.append(cond).append("oi.warehouse_id = ?");
            params.add(orderParam.getWarehouseId());
            cond = " and ";
        }

        boolean isGroupBy = false;
        if (StrKit.notBlank(orderParam.getProductName())
                || StrKit.notBlank(orderParam.getBarcode())
                || StrKit.notBlank(orderParam.getSkuId())
                || StrKit.notBlank(orderParam.getWarehouseId())
                || (orderParam.getQueryReturnRefund() != null && orderParam.getQueryReturnRefund())) {
            builder.append(" group by o.id ");
            isGroupBy = true;
        }

        builder.append(" order by o.id desc");

        if (orderParam.getPageNumber() == null) {
            List<Order> list = find(select + builder.toString(), params.toArray());
            Page<Order> page = new Page<>(list, 0, 0, 0, list.size());
            return page;
        }

        return super.paginate(orderParam.getPageNumber(), orderParam.getPageSize(), isGroupBy, select, builder.toString(), params.toArray());
    }

    /**
     * 返回订单列表给打印软件
     *
     * @param statuses     订单状态 '或' 查询
     * @param orderNumbers
     * @param startedDate
     * @param endDate
     * @return
     */
    public List<Order> find(String[] statuses, String[] orderNumbers, Long startedDate, Long endDate) {
        List<Object> params = new ArrayList<>();
        StringBuilder sql = new StringBuilder("select * from t_order ");
        String cond = " where ";
        if (statuses != null && statuses.length > 0) {
            sql.append(cond);
            sql.append(" ( ");
            cond = "";
            for (String status : statuses) {
                sql.append(cond);
                sql.append("status=?");
                params.add(status);
                cond = " or ";
            }
            sql.append(" ) ");
            cond = " and ";
        }

        if (orderNumbers != null && orderNumbers.length > 0) {
            sql.append(cond);
            sql.append(" ( ");
            cond = "";
            for (String orderNumber : orderNumbers) {
                sql.append(cond);
                sql.append("order_number=?");
                params.add(orderNumber);
                cond = " or ";
            }
            sql.append(" ) ");
            cond = " and ";
        }

        if (startedDate != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            sql.append(cond);
            sql.append("created_date>?");
            params.add(simpleDateFormat.format(new Date(startedDate)));
            cond = " and ";
        }

        if (endDate != null) {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            sql.append(cond);
            sql.append("created_date<?");
            params.add(simpleDateFormat.format(new Date(endDate)));
            cond = " and ";
        }

        return find(sql.toString(), params.toArray());

    }

    @Override
    public boolean save() {
        setOrderNumber(generateOrderNumber(getUserId()));
        setStatus(Order.Status.CREATED_PAY_PENDING.toString());
        setCreatedDate(new Date());
        return super.save();
    }

    @Override
    public boolean delete() {
        setIsDeleted(FAKE_DELETED);
        return super.update();
    }

    private String generateOrderNumber(int userId) {
        StringBuilder orderNumber = new StringBuilder();
        SimpleDateFormat format = new SimpleDateFormat("yyMMddHHmmssSSS");
        orderNumber.append(format.format(System.currentTimeMillis()));
        orderNumber.append(userId);
        return orderNumber.toString();
    }

    public Integer findPaid(int userId, String marketing) {
        String[] statuses = {Order.Status.PAID_CONFIRM_PENDING.toString(),
                Order.Status.CONFIRMED_DELIVER_PENDING.toString(),
                Order.Status.CLOSED_CONFIRMED.toString(),
                Order.Status.DELIVERED_CONFIRM_PENDING.toString(),
                Order.Status.DELIVERING.toString()};
        List<Object> params = Lists.newLinkedList();
        params.add(userId);
        params.add(marketing);
        StringBuilder sql = new StringBuilder("select count(*) from t_order where user_id=? and marketing=?");
        String cond = " and (";
        for (String status : statuses) {
            sql.append(cond).append("status=?");
            params.add(status);
            cond = " or ";
        }
        sql.append(")");
        return Db.queryNumber(sql.toString(), params.toArray()).intValue();
    }

    public void paidOrderNotify() {
        notifyAllObserver(this, EVENT_ORDER_PAID, null);
    }

    public void closedOrderNotify() {
        notifyAllObserver(this, EVENT_ORDER_CLOSED, null);
    }

    public void refundedOrderNotify() {
        notifyAllObserver(this, EVENT_ORDER_REFUNDED, null);
    }

    public void deliveringOrderNotify() {
        notifyAllObserver(this, EVENT_ORDER_DELIVERING, null);
    }

    public void deliverPendingOrderNotify() {
        notifyAllObserver(this, EVENT_ORDER_DELIVER_PENDING, null);
    }

    /**
     * 计算出某个省的某个月的线下销售额总和 （只有状态为“已确认收货”的订单才计算在内）
     */
    public double getProvinceTotalPrice(String province, String startTime, String endTime, String marketing) {
        String sql = "select ifnull(sum(total_price),0) as sum from t_order" +
                " where status='CLOSED_CONFIRMED' and province=? and deal_date>=? and deal_date<?";
        List<Object> params = Lists.newLinkedList();
        params.add(province);
        params.add(startTime);
        params.add(endTime);
        if (StrKit.notBlank(marketing)) {
            sql += " and marketing=?";
            params.add(marketing);
        }
        return Db.queryNumber(sql, params.toArray()).doubleValue();
    }

    public double getCityTotalPrice(String city, String startTime, String endTime, String marketing) {
        String sql = "select ifnull(sum(total_price),0) as sum from t_order" +
                " where status='CLOSED_CONFIRMED' and city=? and deal_date>=? and deal_date<?";
        List<Object> params = Lists.newLinkedList();
        params.add(city);
        params.add(startTime);
        params.add(endTime);
        if (StrKit.notBlank(marketing)) {
            sql += " and marketing=?";
            params.add(marketing);
        }
        return Db.queryNumber(sql, params.toArray()).doubleValue();
    }

    public double getDistrictTotalPrice(String district, String startTime, String endTime, String marketing) {
        String sql = "select ifnull(sum(total_price),0) as sum from t_order" +
                " where status='CLOSED_CONFIRMED' and district=? and deal_date>=? and deal_date<?";
        List<Object> params = Lists.newLinkedList();
        params.add(district);
        params.add(startTime);
        params.add(endTime);
        if (StrKit.notBlank(marketing)) {
            sql += " and marketing=?";
            params.add(marketing);
        }
        return Db.queryNumber(sql, params.toArray()).doubleValue();
    }

    public List<String> getMnameList() {
        String sql = "select mname from t_order where mname is not null group by mname";
        return Db.query(sql);
    }

}
