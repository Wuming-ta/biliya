/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.pcd.model;

import com.jfeat.kit.SqlQuery;
import com.jfeat.pcd.model.base.PcdBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.ehcache.CacheKit;

import java.util.ArrayList;
import java.util.List;

@TableBind(tableName = "t_pcd")
public class Pcd extends PcdBase<Pcd> {


    public static final String PROVINCE = "p";
    public static final String CITY = "c";
    public static final String DISTRICT = "d";

    private static final String CACHE_NAME = "pcd";
    private static final String ALL_KEY = "all";

    /**
     * Only use for query.
     */
    public static Pcd dao = new Pcd();

    public List<Pcd> getAreaList() {
        return findByParentId(getId());
    }

    public List<Pcd> findRoot() {
        return findByParentId(null);
    }

    public List<Pcd> findByParentId(Integer parentId) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        if (parentId == null) {
            query.where(Fields.PARENT_ID.isNull());
            return find(query.sql());
        }
        else {
            query.where(Fields.PARENT_ID.eq("?"));
            return find(query.sql(), parentId);
        }
    }

    public Pcd findByName(String name, String type) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.NAME.eq("?"));
        query.and(Fields.TYPE.eq("?"));
        return findFirst(query.sql(), name, type);
    }

    public List<Pcd> findByNameWildcard(String name, String type) {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.NAME.like("?"));
        query.and(Fields.TYPE.eq("?"));
        return find(query.sql(), name + "%", type);
    }

    public List<Pcd> findAllByCache() {
        List<Pcd> resultList = CacheKit.get(CACHE_NAME, ALL_KEY);
        if (resultList != null) {
            return resultList;
        }

        List<Pcd> list = findAll();
        resultList = new ArrayList<>();
        for (Pcd province : list) {
            if (province.getParentId() == null) {
                resultList.add(province);
                List<Pcd> cities = new ArrayList<>();
                for (Pcd city : list) {
                    if (city.getType().equals(CITY) && city.getParentId().equals(province.getId())) {
                        cities.add(city);
                        List<Pcd> districts = new ArrayList<>();
                        for (Pcd district : list) {
                            if (district.getType().equals(DISTRICT) && district.getParentId().equals(city.getId())) {
                                districts.add(district);
                            }
                        }
                        city.put("area_list", districts);
                    }
                }
                province.put("area_list", cities);
            }
        }
        CacheKit.put(CACHE_NAME, ALL_KEY, resultList);
        return resultList;
    }

    public Pcd getParent() {
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.ID.eq("?"));
        return findFirst(query.sql(), getParentId());
    }

    public int[] batchAdd(Integer parentId, List<String> name, String type) {
        String sql = "insert into " + getTableName() + " (parent_id, name, type) values (?, ?, ?)";
        Object[][] para = new Object[name.size()][3];
        for (int i = 0; i < name.size(); i++) {
            para[i][0] = parentId;
            para[i][1] = name.get(i);
            para[i][2] = type;
        }
        return Db.batch(sql, para, 1000);
    }

    public int cleanAll() {
        String sql = "delete from " + getTableName();
        return Db.update(sql);
    }

    public boolean save() {
        CacheKit.remove(CACHE_NAME, ALL_KEY);
        return super.save();
    }

    public boolean update() {
        CacheKit.remove(CACHE_NAME, ALL_KEY);
        return super.update();
    }

    public boolean delete() {
        CacheKit.remove(CACHE_NAME, ALL_KEY);
        return super.delete();
    }
}
