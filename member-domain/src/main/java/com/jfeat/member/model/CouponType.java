/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.member.model;

import com.jfeat.kit.SqlQuery;
import com.jfeat.member.model.base.CouponTypeBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@TableBind(tableName = "t_coupon_type")
public class CouponType extends CouponTypeBase<CouponType> {

    /**
     * Only use for query.
     */
    public static CouponType dao = new CouponType();

    public static final int AUTO_GIVE = 1;

    public static final int ENABLED = 1;

    public enum Type {
        ORDER,
        PRODUCT,
        MARKETING_PIECE_GROUP;
    }

    public boolean save() {
        setCode(UUID.randomUUID().toString());
        return super.save();
    }

    public List<CouponType> findByCond(String name, Boolean subtraction, Boolean discount, Boolean money) {
        StringBuilder sql = new StringBuilder("select * from t_coupon_type ");
        List<Object> params = new ArrayList<>();
        String cond = " where ";
        if (StrKit.notBlank(name)) {
            sql.append(cond).append(Fields.NAME.like("?"));
            params.add("%" + name + "%");
            cond = " and ";
        }
        if (subtraction != null && subtraction) {
            sql.append(cond).append(Fields.UP_TO.notNull());
            cond = " and ";
        }
        if (discount != null && discount) {
            sql.append(cond).append(Fields.DISCOUNT.gt(0));
            cond = " and ";
        }
        if (money != null && money) {
            sql.append(cond).append(Fields.MONEY.gt(0));
            cond = " and ";
            sql.append(cond).append(Fields.UP_TO.isNull());
        }
        return find(sql.toString(), params.toArray());
    }

    public List<CouponType> findEnabled() {
        String sql = "select * from t_coupon_type where enabled=1 order by type";
        return find(sql);
    }

    public CouponType findByCode(String code) {
        return findFirst("select * from t_coupon_type where code=?", code);
    }
}
