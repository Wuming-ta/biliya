/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.member.model;

import com.google.common.collect.Lists;
import com.jfeat.member.model.base.CouponStrategyBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;

@TableBind(tableName = "t_coupon_strategy")
public class CouponStrategy extends CouponStrategyBase<CouponStrategy> {

    /**
     * Only use for query.
     */
    public static CouponStrategy dao = new CouponStrategy();


    public enum Type {
        PRECISION_MARKETING, //精准营销
        REGISTER, //注册自动发放
        SHARE_LINK, //点击分享链接
        SYSTEM, //系统赠送
        PIECE_GROUP; //拼团赠送优惠券
    }

    public enum Status {
        DRAFT,
        EXECUTING,
        SUSPENDED,
        FINISHED
    }

    //目标人群
    public static final Integer TARGET_TYPE_ALL = 0;
    public static final Integer TARGET_TYPE_SOME = 1;

    public List<CouponType> getCouponTypes() {
        return CouponType.dao.find("select * from t_coupon_type a " +
                "join t_coupon_strategy_item b on a.id=b.coupon_type_id " +
                "where b.strategy_id=? and a.enabled=?", getId(), CouponType.ENABLED);
    }

    public List<CouponStrategy> findByType(Type type) {
        return find("select * from t_coupon_strategy where type=? and status=?", type.toString(), Status.EXECUTING.toString());
    }

    public List<CouponStrategy> find(String name, String type, String status, String startTime, String endTime) {
        StringBuilder sql = new StringBuilder("select * from t_coupon_strategy ");
        List<Object> params = new ArrayList<>();
        String cond = " where ";
        if (StrKit.notBlank(name)) {
            sql.append(cond);
            sql.append(Fields.NAME.like("?"));
            params.add(name + "%");
            cond = " and ";
        }
        if (StrKit.notBlank(type)) {
            sql.append(cond);
            sql.append(Fields.TYPE.eq("?"));
            params.add(type);
            cond = " and ";
        }
        if (StrKit.notBlank(status)) {
            sql.append(cond);
            sql.append(Fields.STATUS.eq("?"));
            params.add(status);
            cond = " and ";
        }
        if (StrKit.notBlank(startTime)) {
            sql.append(cond);
            sql.append(Fields.START_TIME.ge("?"));
            params.add(startTime);
            cond = " and ";
        }
        if (StrKit.notBlank(endTime)) {
            sql.append(cond);
            sql.append(Fields.END_TIME.le("?"));
            params.add(endTime);
            cond = " and ";
        }
        return find(sql.toString(), params.toArray());
    }

    public void updateCouponTypes(Integer... couponTypeIds) {
        String delete = "delete from t_coupon_strategy_item where strategy_id=?";
        Db.update(delete, getId());

        List<Record> records = Lists.newArrayList();
        for (Integer couponTypeId : couponTypeIds) {
            Record record = new Record();
            record.set("strategy_id", getId());
            record.set("coupon_type_id", couponTypeId);
            records.add(record);
        }
        Db.batchSave("t_coupon_strategy_item", records, 50);
    }
}
