/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.member.model;

import com.google.common.collect.Maps;
import com.jfeat.identity.model.User;
import com.jfeat.kit.JsonKit;
import com.jfeat.kit.SqlQuery;
import com.jfeat.member.model.base.CouponBase;
import com.jfeat.member.model.param.CouponParam;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

@TableBind(tableName = "t_coupon")
public class Coupon extends CouponBase<Coupon> {

    private static Logger logger = LoggerFactory.getLogger(Coupon.class);

    /**
     * Only use for query.
     */
    public static Coupon dao = new Coupon();

    public enum Status {
        NON_ACTIVATION,
        ACTIVATION,
        OVERDUE,
        USED
    }

    public enum Type {
        PRODUCT,  //特定产品才可用
        ORDER,  //整单用
        MARKETING_PIECE_GROUP; //营销活动专用
    }

    /**
     * 优惠券来源
     */
    public enum Source {
        SYSTEM, //后台系统赠送
        REGISTER, // 新用户注册赠送
        LINK, //点击分享链接赠送
        SHARE, //分享赠送
        ORDER; //下单赠送
    }

    public enum AttributeNames {
        ORDER_NUMBER("order_number"), //用在哪个订单
        USED_DATE("used_date"),//使用日期
        BENEFIT("benefit"), //优惠了多少钱
        SOURCE("source"); //优惠券来源

        private String name;

        AttributeNames(String name) {
            this.name = name;
        }

        public String toString() {
            return this.name;
        }
    }

    public boolean isOverdue() {
        return Status.valueOf(getStatus()) == Status.OVERDUE || new Date().getTime() - getValidDate().getTime() >= 0;
    }

    public boolean addAttribute(String name, Object value) {
        try {
            String attrString = getAttribute();
            Map<String, Object> attributes = null;
            if (StrKit.isBlank(attrString)) {
                attributes = Maps.newHashMap();
            } else {
                attributes = JsonKit.convertToMap(attrString);
            }
            attributes.put(name, value);
            setAttribute(com.jfinal.kit.JsonKit.toJson(attributes));
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("convert attribute to map error. exception = {}", e.getMessage());
            return false;
        }

        return true;
    }

    public Long countUserCouponByStatus(int userId, String status) {
        return Db.queryNumber("select count(*) from t_coupon where user_id=? and status=?", userId, status).longValue();
    }

    public List<Coupon> find(int userId, Type type, Status status) {
        List<Object> param = new ArrayList<>();
        SqlQuery query = new SqlQuery();
        query.from(getTableName());
        query.where(Fields.USER_ID.eq("?"));
        param.add(userId);
        if (type != null) {
            query.and(Fields.TYPE.eq("?"));
            param.add(type.toString());
        }
        if (status != null) {
            query.and(Fields.STATUS.eq("?"));
            param.add(status.toString());
        }
        List<Coupon> coupons = find(query.sql(), param.toArray());
        validOverdueStatus(coupons);
        return coupons;
    }

    public boolean save() {
        setCode(UUID.randomUUID().toString());
        setLastModifiedDate(new Date());
        return super.save();
    }

    public boolean update(){
        setLastModifiedDate(new Date());
        return super.update();
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public Page<Coupon> paginate(int pageNumber, int pageSize, int userId) {
        CouponParam couponParam = new CouponParam(pageNumber, pageSize);
        couponParam.setUserId(userId);
        return paginate(couponParam);
    }

    public Page<Coupon> paginate(CouponParam couponParam) {
        List<Object> param = new ArrayList<>();
        String select = "select c.*,u.name as user_name, u.uid, " +
                "case c.status " +
                "when 'ACTIVATION' then 10 " +
                "when 'NON_ACTIVATION' then 9 " +
                "when 'USED' then 8 else 0 " +
                "end as _sort ";
        StringBuilder builder = new StringBuilder();
        builder.append("from ");
        builder.append(getTableName());
        builder.append(" as c ");
        builder.append(" join ");
        builder.append(User.dao.getTableName());
        builder.append(" as u on c.user_id=u.id ");
        String cond = " where ";

        if (couponParam.getUserId() != null) {
            builder.append(cond).append("c.user_id = ?");
            param.add(couponParam.getUserId());
            cond = " and ";
        }

        if (StrKit.notBlank(couponParam.getUser())) {
            builder.append(cond);
            builder.append(" u.name like ?");
            param.add(couponParam.getUser() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(couponParam.getName())) {
            builder.append(cond);
            builder.append(" c.name like ?");
            param.add(couponParam.getName() + "%");
            cond = " and ";
        }

        if (StrKit.notBlank(couponParam.getCode())) {
            builder.append(cond);
            builder.append(Fields.CODE.like("?"));
            param.add(couponParam.getCode() + "%");
            cond = " and ";
        }
        if (StrKit.notBlank(couponParam.getStatus())) {
            builder.append(cond);
            builder.append(" c.");
            builder.append(Fields.STATUS.eq("?"));
            param.add(couponParam.getStatus());
        }

        builder.append(" order by _sort desc, c.id ");

        return paginate(couponParam.getPageNumber(), couponParam.getPageSize(), select, builder.toString(), param.toArray());
    }

    public void validOverdueStatus(List<Coupon> coupons) {
        for (Coupon coupon : coupons) {
            Status currentStatus = Status.valueOf(coupon.getStatus());
            if (coupon.isOverdue() &&
                    (currentStatus == Status.NON_ACTIVATION || currentStatus == Status.ACTIVATION)) {
                coupon.setStatus(Status.OVERDUE.toString());
                coupon.update();
            }
        }
    }

    public List<Coupon> findCouponsShouldBeOverdue(String date) {
        String sql = "select * from t_coupon where (status=? or status=?) and valid_date<=?";
        return find(sql, Status.NON_ACTIVATION.toString(), Status.ACTIVATION.toString(), date);
    }

    public void overdueCoupons(List<Coupon> coupons) {
        for (Coupon coupon : coupons) {
            coupon.setStatus(Status.OVERDUE.toString());
            coupon.setLastModifiedDate(new Date());
        }
        Db.batchUpdate(coupons, 100);
    }

    public List<Coupon> findBetween(String startTime, String endTime) {
        return find("select * from t_coupon where last_modified_date between ? and ?", startTime, endTime);
    }

    public Integer countCoupon(String status) {
        return Db.queryNumber("select count(*) from t_coupon where status = ?", status).intValue();
    }
}
