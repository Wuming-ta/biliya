/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.misc.model;

import com.google.common.collect.Lists;
import com.jfeat.misc.model.base.AdBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;

@TableBind(tableName = "t_ad")
public class Ad extends AdBase<Ad> {

    public static final int ENABLED = 1;
    public static final int DISABLED = 0;

    /**
     * 轮播策略
     */
    public enum CarouselStrategy {
        EVERY_DAY {
            @Override
            public boolean canCarousel() {
                return true;
            }
        },
        ODD_DAY {
            @Override
            public boolean canCarousel() {
                return Calendar.getInstance().get(Calendar.DAY_OF_MONTH) % 2 != 0;
            }
        },
        EVEN_DAY {
            @Override
            public boolean canCarousel() {
                return Calendar.getInstance().get(Calendar.DAY_OF_MONTH) % 2 == 0;
            }
        },
        ODD_HOUR {
            @Override
            public boolean canCarousel() {
                return Calendar.getInstance().get(Calendar.HOUR_OF_DAY) % 2 != 0;
            }
        },
        EVEN_HOUR {
            @Override
            public boolean canCarousel() {
                return Calendar.getInstance().get(Calendar.HOUR_OF_DAY) % 2 == 0;
            }
        };

        public abstract boolean canCarousel();
    }

    /**
     * Only use for query.
     */
    public static Ad dao = new Ad();

    public List<CarouselStrategy> getCarouselStrategyList() {
        List<CarouselStrategy> list = Lists.newArrayList();
        if (StrKit.notBlank(getStrategy())) {
            for (String str : getStrategy().split("&")) {
                list.add(CarouselStrategy.valueOf(str));
            }
        }
        return list;
    }

    public boolean isEnabled() {
        return getEnabled() == 1;
    }

    public List<Ad> findByGroupId(int groupId) {
        return find("select * from t_ad where group_id=?", groupId);
    }

    public List<Ad> findAvailable(int groupId) {
        List<Ad> list = find("select * from t_ad where group_id=? and enabled=?", groupId, ENABLED);
        ListIterator<Ad> itor = list.listIterator();
        while (itor.hasNext()) {
            Ad ad = itor.next();
            boolean canCarousel = true;
            //EVERY_DAY&ODD_DAY&EVEN_DAY&EVEN_HOUR
            if (StrKit.notBlank(ad.getStrategy())) {
                Boolean dayCan = null;
                Boolean hourCan = null;
                for (String str : ad.getStrategy().split("&")) {
                    CarouselStrategy strategy = CarouselStrategy.valueOf(str);
                    if (str.endsWith("_DAY")) {
                        dayCan = dayCan == null ? false : dayCan;
                        dayCan |= strategy.canCarousel();
                    }
                    if (str.endsWith("_HOUR")) {
                        hourCan = hourCan == null ? false : hourCan;
                        hourCan |= strategy.canCarousel();
                    }
                }
                dayCan = dayCan == null ? true : dayCan;
                hourCan = hourCan == null ? true : hourCan;
                canCarousel = dayCan & hourCan;
            }
            if (!canCarousel) {
                itor.remove();
            }
        }
        return list;
    }
}
