/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.misc.model;

import com.jfeat.identity.model.User;
import com.jfeat.misc.model.base.FeedbackBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_feedback")
public class Feedback extends FeedbackBase<Feedback> {
    public static int READ = 0;
    public static int UNREAD = 1;
    /**
     * Only use for query.
     */
    public static Feedback dao = new Feedback();

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public List<FeedbackImage> getImages() {
        return FeedbackImage.dao.findByFeedbackId(getId());
    }

    public boolean addImage(String url) {
        FeedbackImage image = new FeedbackImage();
        image.setFeedbackId(getId());
        image.setUrl(url);
        return image.save();
    }

    public Page<Feedback> paginate(int pageNumber, int pageSize) {
        StringBuilder select = new StringBuilder("select f.*, u.name as user_name, u.avatar as avatar");
        StringBuilder query = new StringBuilder();
        query.append("from t_feedback as f ");
        query.append("join t_user u on u.id=f.user_id ");
        query.append("order by f.unread desc,f.created_date desc");

        return paginate(pageNumber, pageSize, select.toString(), query.toString());
    }

    public boolean save() {
        setCreatedDate(new Date());
        return super.save();
    }

    public long countUnreadedFeedbacks() {
        return Db.queryNumber("select count(*) from t_feedback where unread=?", UNREAD).longValue();
    }
}
