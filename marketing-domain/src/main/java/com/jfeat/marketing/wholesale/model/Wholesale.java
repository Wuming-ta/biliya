/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.wholesale.model;

import com.google.common.collect.Lists;
import com.jfeat.marketing.exception.SaleIncreaseException;
import com.jfeat.marketing.wholesale.model.base.WholesaleBase;
import com.jfeat.product.model.Product;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.LinkedList;
import java.util.List;

@TableBind(tableName = "t_wholesale")
public class Wholesale extends WholesaleBase<Wholesale> {

    /**
     * Only use for query.
     */
    public static Wholesale dao = new Wholesale();

    public enum Status {
        INIT {
            @Override
            public boolean transfer(Status status) {
                return status == ONSELL;
            }
        },
        ONSELL {
            public boolean transfer(Status status) {
                return status == OFFSELL;
            }
        },
        OFFSELL {
            public boolean transfer(Status status) {
                return status == ONSELL;
            }
        };

        public boolean transfer(Status status) {
            return false;
        }
    }

    @Override
    public boolean save() {
        setStatus(Status.INIT.toString());
        return super.save();
    }

    public List<Wholesale> findByProductId(Integer productId) {
        return findByField(Fields.PRODUCT_ID.toString(), productId);
    }

    public Product getProduct() {
        return Product.dao.findById(getProductId());
    }

    public Page<Wholesale> paginate(Integer pageNumber, Integer pageSize, Integer categoryId, String marketingName, String status) {
        String sql = "select *";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_wholesale where 1=1");
        LinkedList params = Lists.newLinkedList();
        String cond = " and ";
        if (categoryId != null) {
            sqlExceptSelect.append(cond).append(Fields.CATEGORY_ID.eq("?"));
            params.add(categoryId);
        }
        if (StrKit.notBlank(marketingName)) {
            sqlExceptSelect.append(cond).append(Fields.MARKETING_NAME.like("?"));
            params.add("%" + marketingName + "%");
        }
        if (StrKit.notBlank(status)) {
            sqlExceptSelect.append(cond).append(Wholesale.Fields.STATUS.eq("?"));
            params.add(status);
        }
        sqlExceptSelect.append(" order by sort_order asc,id desc");
        return this.paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public List<WholesalePricing> getWholesalePricings() {
        return WholesalePricing.dao.findByWholesaleId(getId());
    }

    public WholesaleCategory getCategory() {
        return WholesaleCategory.dao.findById(getCategoryId());
    }

    public List<WholesaleMember> getMembers() {
        return WholesaleMember.dao.findByWholesaleId(getId());
    }

    //某个拼团成员支付了，就更新该批发活动的 “已售数量“
    public void increaseSale(int count) throws SaleIncreaseException {
        String sql = "update t_wholesale set sale=sale+? where id=?";
        int result = Db.update(sql, count, getId());
        if (result == 0) {
            throw new SaleIncreaseException("update.sale.error");
        }
    }

    //某个拼团成员退款成功了，就更新该批发活动的“已售数量”
    public void decreaseSale(int count) throws SaleIncreaseException {
        String sql = "update t_wholesale set sale=sale-? where id=? and sale>=?";
        int result = Db.update(sql, count, getId(), count);
        if (result == 0) {
            throw new SaleIncreaseException("update.sale.error");
        }
    }

}
