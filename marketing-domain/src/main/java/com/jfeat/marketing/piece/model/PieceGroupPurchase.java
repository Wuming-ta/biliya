/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.piece.model;

import com.google.common.collect.Lists;
import com.jfeat.marketing.exception.SaleIncreaseException;
import com.jfeat.marketing.piece.model.base.PieceGroupPurchaseBase;
import com.jfeat.product.model.Product;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_piece_group_purchase")
public class PieceGroupPurchase extends PieceGroupPurchaseBase<PieceGroupPurchase> {

    /**
     * Only use for query.
     */
    public static PieceGroupPurchase dao = new PieceGroupPurchase();

    public enum Status {
        INIT {
            @Override
            public boolean transfer(Status status) {
                return status == ONSELL;
            }
        },
        ONSELL {
            @Override
            public boolean transfer(Status status) {
                return status == OFFSELL || status == LOCK;
            }
        },
        OFFSELL {
            @Override
            public boolean transfer(Status status) {
                return status == ONSELL;
            }
        },
        LOCK {
            @Override
            public boolean transfer(Status status) {
                return status == ONSELL || status == OFFSELL;
            }
        };

        public boolean transfer(Status status) {
            return false;
        }
    }

    public enum AllowMultiMaster {
        ON,
        OFF
    }

    public enum MasterFree {
        NO(0), //非免单活动
        YES(1); //可以使用免单优惠券的活动
        private int val;

        MasterFree(int val) {
            this.val = val;
        }

        public int getValue() {
            return this.val;
        }
    }

    public List<PieceGroupPurchase> findByProductId(Integer productId) {
        return findByField(Fields.PRODUCT_ID.toString(), productId);
    }

    public Product getProduct() {
        return Product.dao.findById(getProductId());
    }

    public boolean save() {
        setStatus(Status.INIT.toString());
        return super.save();
    }

    public Page<PieceGroupPurchase> paginate(Integer pageNumber, Integer pageSize, String marketingName, String status, Integer masterFree) {
        String sql = "select *";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_piece_group_purchase where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (StrKit.notBlank(marketingName)) {
            sqlExceptSelect.append(cond).append(Fields.MARKETING_NAME.like("?"));
            params.add("%" + marketingName + "%");
        }
        if (StrKit.notBlank(status)) {
            sqlExceptSelect.append(cond).append(Fields.STATUS.eq("?"));
            params.add(status);
        }
        if (masterFree != null) {
            sqlExceptSelect.append(cond).append(Fields.MASTER_FREE.eq("?"));
            params.add(masterFree);
        }
        sqlExceptSelect.append(" order by sort_order asc,id desc");
        return paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public List<PieceGroupPurchasePricing> getPricings() {
        return PieceGroupPurchasePricing.dao.findByPieceGroupPurchaseId(getId());
    }

    public List<PieceGroupPurchaseMaster> getMasters() {
        return PieceGroupPurchaseMaster.dao.findByPieceGroupPurchaseId(getId());
    }

    public enum PaymentType {
        WECHAT,
        POINT
    }

    //某个拼团成员支付了，就更新该拼团活动的 “已售数量“
    public void increaseSale(int count) throws SaleIncreaseException {
        String sql = "update t_piece_group_purchase set sale=sale+? where id=?";
        int result = Db.update(sql, count, getId());
        if (result == 0) {
            throw new SaleIncreaseException("update sale error.");
        }
    }

    //某个拼团成员退款成功了，就更新该拼团活动的“已售数量”
    public void decreaseSale(int count) throws SaleIncreaseException {
        String sql = "update t_piece_group_purchase set sale=sale-? where id=? and sale>=?";
        int result = Db.update(sql, count, getId(), count);
        if (result == 0) {
            throw new SaleIncreaseException("update sale error.");
        }
    }
}

