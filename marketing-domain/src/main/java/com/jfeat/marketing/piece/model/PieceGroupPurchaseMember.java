/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.piece.model;

import com.google.common.collect.Lists;
import com.jfeat.identity.model.User;
import com.jfeat.marketing.piece.model.base.PieceGroupPurchaseMemberBase;
import com.jfeat.order.model.Order;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.Date;
import java.util.List;

@TableBind(tableName = "t_piece_group_purchase_member")
public class PieceGroupPurchaseMember extends PieceGroupPurchaseMemberBase<PieceGroupPurchaseMember> {

    /**
     * Only use for query.
     */
    public static PieceGroupPurchaseMember dao = new PieceGroupPurchaseMember();

    public enum Status {
        UNPAID,
        PAID,
        REFUND
    }

    public List<PieceGroupPurchaseMember> findByMasterId(Integer masterId) {
        return findByField(Fields.MASTER_ID.toString(), masterId);
    }

    public List<PieceGroupPurchaseMember> findByMasterIdAndStatus(Integer masterId, String status) {
        return findByFields(new String[]{Fields.MASTER_ID.toString(), Fields.STATUS.toString()}, new Object[]{masterId, status});
    }

    public PieceGroupPurchaseMaster getPieceGroupPurchaseMaster() {
        return PieceGroupPurchaseMaster.dao.findById(getMasterId());
    }

    public List<PieceGroupPurchaseMember> findByUserId(Integer userId) {
        return findByField(Fields.USER_ID.toString(), userId);
    }

    public PieceGroupPurchaseMember findFirstByUserIdOrderNumberStatus(Integer userId, String orderNumber, String status) {
        String sql = "select * from t_piece_group_purchase_member where user_id=? and order_number=? and status=?";
        return findFirst(sql, userId, orderNumber, status);
    }

    public Order getOrder() {
        return Order.dao.findByOrderNumber(getOrderNumber());
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public Page<PieceGroupPurchaseMember> paginateByMasterId(Integer pageNumber, Integer pageSize, Integer masterId) {
        String sql = "select *";
        String sqlExceptSelect = "  from t_piece_group_purchase_member where master_id=?";
        return paginate(pageNumber, pageSize, sql, sqlExceptSelect, masterId);
    }

    public boolean save() {
        setCreatedTime(new Date());
        setStatus(Status.UNPAID.toString());
        return super.save();
    }

    public PieceGroupPurchaseMember findByUserIdAndPieceGroupPurchaseIdAndMasterStatus(Integer userId, Integer pieceGroupPurchaseId, String status) {
        StringBuilder sql = new StringBuilder("select a.*" +
                ",b.start_time,b.end_time,b.piece_group_purchase_id,b.promoted,b.status as piece_group_purchase_master_status" +
                ",c.marketing_short_name,c.payment_type,c.marketing_name,c.product_id,c.status as piece_group_purchase_status,c.min_participator_count,c.price,c.suggested_price" +
                ",c.sale,c.coupon_usage,c.cover,c.duration,c.free_shipping,c.master_free,c.description" +
                " from t_piece_group_purchase_member as a" +
                " join t_piece_group_purchase_master as b on a.master_id=b.id" +
                " join t_piece_group_purchase as c on b.piece_group_purchase_id=c.id" +
                " where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (userId != null) {
            sql.append(cond).append("a.user_id=?");
            params.add(userId);
        }
        if (pieceGroupPurchaseId != null) {
            sql.append(cond).append("c.id=?");
            params.add(pieceGroupPurchaseId);
        }
        if (StrKit.notBlank(status)) {
            sql.append(cond).append("b.status=?");
            params.add(status);
        }
        return findFirst(sql.toString(), params.toArray());
    }

    public Page<PieceGroupPurchaseMember> paginateByUserIdAndMasterStatus(Integer pageNumber, Integer pageSize, Integer userId, String masterStatus) {
        String sql = "select a.*" +
                ",b.start_time,b.end_time,b.piece_group_purchase_id,b.promoted,b.status as piece_group_purchase_master_status" +
                ",c.marketing_short_name,c.payment_type,c.marketing_name,c.product_id,c.status as piece_group_purchase_status,c.min_participator_count,c.price,c.suggested_price" +
                ",c.sale,c.coupon_usage,c.cover,c.duration,c.free_shipping,c.master_free,c.description";

        StringBuilder sqlExceptSelect = new StringBuilder(" from t_piece_group_purchase_member as a" +
                " join t_piece_group_purchase_master as b on a.master_id=b.id" +
                " join t_piece_group_purchase as c on b.piece_group_purchase_id=c.id" +
                " where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (userId != null) {
            sqlExceptSelect.append(cond).append("a.user_id=?");
            params.add(userId);
        }
        if (StrKit.notBlank(masterStatus)) {
            sqlExceptSelect.append(cond).append("b.status=?");
            params.add(masterStatus);
        }
        return paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public int countByMasterId(Integer masterId) {
        return Db.queryNumber("select count(*) from t_piece_group_purchase_member where master_id=?", masterId).intValue();
    }

    public int countByMasterIdAndStatus(Integer masterId, String status) {
        return Db.queryNumber("select count(*) from t_piece_group_purchase_member where master_id=? and status=?", masterId, status).intValue();

    }
}
