/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.piece.model;

import com.google.common.collect.Lists;
import com.jfeat.identity.model.User;
import com.jfeat.marketing.piece.model.base.PieceGroupPurchaseMasterBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_piece_group_purchase_master")
public class PieceGroupPurchaseMaster extends PieceGroupPurchaseMasterBase<PieceGroupPurchaseMaster> {

    /**
     * Only use for query.
     */
    public static PieceGroupPurchaseMaster dao = new PieceGroupPurchaseMaster();

    public enum Status {
        OPENING,
        DEAL,
        FAIL
    }

    public List<PieceGroupPurchaseMaster> findByUserId(Integer userId) {
        return findByField(Fields.USER_ID.toString(), userId);
    }

    public List<PieceGroupPurchaseMaster> findByUserIdAndStatus(Integer userId, String status) {
        StringBuilder sql = new StringBuilder("select * from t_piece_group_purchase_master where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (userId != null) {
            sql.append(cond).append(Fields.USER_ID.eq("?"));
            params.add(userId);
        }
        if (StrKit.notBlank(status)) {
            sql.append(cond).append(Fields.STATUS.eq("?"));
            params.add(status);
        }
        return find(sql.toString(), params.toArray());
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public List<PieceGroupPurchaseMaster> findByPieceGroupPurchaseId(Integer pieceGroupPurchaseId) {
        return findByField(Fields.PIECE_GROUP_PURCHASE_ID.toString(), pieceGroupPurchaseId);
    }

    public Page<PieceGroupPurchaseMaster> paginateByPieceGroupPurchaseId(Integer pageNumber, Integer pageSize, Integer pieceGroupPurchaseId) {
        String sql = "select *";
        String sqlExceptSelect = " from t_piece_group_purchase_master where piece_group_purchase_id=?";
        return paginate(pageNumber, pageSize, sql, sqlExceptSelect, pieceGroupPurchaseId);
    }

    public Page<PieceGroupPurchaseMaster> paginate(Integer pageNumber, Integer pageSize, Integer pieceGroupPurchaseId, String status, String startTime, String endTime) {
        String sql = "select *";
        StringBuilder sqlExceptSelect = new StringBuilder(" from t_piece_group_purchase_master where 1=1");
        String cond = " and ";
        List<Object> params = Lists.newLinkedList();
        if (pieceGroupPurchaseId != null) {
            sqlExceptSelect.append(cond).append(Fields.PIECE_GROUP_PURCHASE_ID.eq("?"));
            params.add(pieceGroupPurchaseId);
        }
        if (StrKit.notBlank(status)) {
            sqlExceptSelect.append(cond).append(Fields.STATUS.eq("?"));
            params.add(status);
        }
        if (StrKit.notBlank(startTime)) {
            sqlExceptSelect.append(cond).append(Fields.END_TIME.ge("?"));
            params.add(startTime);
        }
        if (StrKit.notBlank(endTime)) {
            sqlExceptSelect.append(cond).append(Fields.END_TIME.le("?"));
            params.add(endTime);
        }
        return paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public PieceGroupPurchase getPieceGroupPurchase() {
        return PieceGroupPurchase.dao.findById(getPieceGroupPurchaseId());
    }

    public List<PieceGroupPurchaseMember> getMembers() {
        return PieceGroupPurchaseMember.dao.findByMasterId(getId());
    }

    public List<PieceGroupPurchaseMember> getMembers(String memberStatus) {
        return PieceGroupPurchaseMember.dao.findByMasterIdAndStatus(getId(), memberStatus);
    }

    public int getMembersCount() {
        return PieceGroupPurchaseMember.dao.countByMasterId(getId());
    }

    public int getMembersCount(String memberStatus) {
        return PieceGroupPurchaseMember.dao.countByMasterIdAndStatus(getId(), memberStatus);
    }

    public boolean save() {
        setStatus(Status.OPENING.toString());
        return super.save();
    }

    public List<PieceGroupPurchaseMaster> findByStatus(String status) {
        String sql = "select * from t_piece_group_purchase_master";
        List<Object> params = Lists.newLinkedList();
        if (StrKit.notBlank(status)) {
            sql += " where status=?";
            params.add(status);
        }
        return find(sql, params.toArray());
    }

    public List<PieceGroupPurchaseMaster> findByStatusAndPromoted(String status, Integer promoted) {
        StringBuilder sql = new StringBuilder("select * from t_piece_group_purchase_master where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (StrKit.notBlank(status)) {
            sql.append(cond).append(Fields.STATUS.eq("?"));
            params.add(status);
        }
        if (promoted != null) {
            sql.append(cond).append(Fields.PROMOTED.eq("?"));
            params.add(promoted);
        }
        return find(sql.toString(), params.toArray());
    }

    public List<PieceGroupPurchaseMaster> findByStatus(String status, Integer promoted, String memberStatus) {
        String sql = "select a.*,b.status as member_status from t_piece_group_purchase_master as a" +
                " join t_piece_group_purchase_member as b" +
                " on a.id=b.master_id" +
                " where a.user_id=b.user_id and a.status=? and a.promoted=? and b.status=?";
        return find(sql, status, promoted, memberStatus);
    }

    public List<PieceGroupPurchaseMaster> findByPieceGroupPurchaseIdAndStatus(Integer pieceGroupPurchaseId,
                                                                              String status,
                                                                              Integer promoted,
                                                                              String memberStatus) {
        String sql = "select a.*,b.status as member_status from t_piece_group_purchase_master as a" +
                " join t_piece_group_purchase_member as b" +
                " on a.id=b.master_id" +
                " where a.user_id=b.user_id and a.piece_group_purchase_id=? and a.status=? and a.promoted=? and b.status=?";
        return find(sql, pieceGroupPurchaseId, status, promoted, memberStatus);
    }

}
