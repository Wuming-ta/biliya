/*
 *   Copyright (C) 2014-2018 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.trial.model;

import com.google.common.collect.Lists;
import com.jfeat.marketing.trial.model.base.TrialBase;
import com.jfeat.product.model.Product;
import com.jfeat.product.model.base.ProductBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_trial")
public class Trial extends TrialBase<Trial> {

    /**
     * Only use for query.
     */
    public static Trial dao = new Trial();

    public enum Enabled {
        NO(0),
        YES(1);

        private Integer val;

        Enabled(Integer val) {
            this.val = val;
        }

        public Integer getValue() {
            return this.val;
        }
    }

    public enum PaymentType {
        WECHAT, //微信支付
        POINT  //积分支付
    }

    public List<TrialImage> getCovers() {
        return TrialImage.dao.findByTrialId(getId());
    }

    public Product getProduct() {
        return Product.dao.findById(getProductId());
    }

    public Page<Trial> paginate(Integer pageNumber, Integer pageSize, Short enabled, String name, String barCode, Integer productCategoryId) {
        String sql = "select a.*, b.name as product_name, b.bar_code, b.barcode, c.name as category_name ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_trial a " +
                "left join t_product b on a.product_id = b.id " +
                "left join t_product_category c on c.id = b.category_id " +
                "where 1=1");
        List<Object> params = Lists.newLinkedList();
        String cond = " and ";
        if (enabled != null) {
            sqlExceptSelect.append(cond).append("a.").append(Fields.ENABLED.eq("?"));
            params.add(enabled);
        }
        if (StrKit.notBlank(name)) {
            sqlExceptSelect.append(cond).append("a.").append(Trial.Fields.NAME.like("?"));
            params.add("%" + name + "%");
        }
        if (StrKit.notBlank(barCode)) {
            sqlExceptSelect.append(cond).append(" ( b.").append(Product.Fields.BAR_CODE.like("?")).append(" or b.").append(Product.Fields.BARCODE.like("?")).append(" ) ");
            params.add("%" + barCode + "%");
            params.add("%" + barCode + "%");
        }
        if (productCategoryId != null) {
            sqlExceptSelect.append(cond).append("b.").append(Product.Fields.CATEGORY_ID.eq("?"));
            params.add(productCategoryId);
        }

        sqlExceptSelect.append(" order by a.enabled desc,a.index asc,a.id desc");
        return this.paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public List<Trial> findEnabled() {
        return findByEnabled(Enabled.YES.getValue());
    }

    public List<Trial> findDisabled() {
        return findByEnabled(Enabled.NO.getValue());
    }

    public List<Trial> findByEnabled(Integer enabled) {
        String sql = "select * from t_trial where enabled=? order by `index` asc, id desc";
        return find(sql, enabled);
    }

    @Override
    public boolean save() {
        if(this.getEnabled()==null) {
            setEnabled(Enabled.NO.getValue());
        }
        setVersion(1);
        return super.save();
    }

}
