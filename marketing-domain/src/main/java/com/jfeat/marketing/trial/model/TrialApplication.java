/*
 *   Copyright (C) 2014-2018 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.marketing.trial.model;

import com.google.common.collect.Lists;
import com.jfeat.identity.model.User;
import com.jfeat.marketing.trial.model.base.TrialApplicationBase;
import com.jfeat.order.model.Order;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_trial_application")
public class TrialApplication extends TrialApplicationBase<TrialApplication> {

    /**
     * Only use for query.
     */
    public static TrialApplication dao = new TrialApplication();

    @Override
    public boolean save() {
        setStatus(Status.AUDITING.toString());
        return super.save();
    }

    /*AUDITING 申请中 AUDITED 已获得试用资格 REJECTED 未获得试用资格 */
    public static enum Status {
        APPLYING, //申请中
        AUDITING, //审核中
        DELIVERING, //发货中
        DELIVERED, //已发货
        REJECTED  //未获得试用资格
    }


    public TrialApplication findFirstByOrderId(Integer orderId) {
        String sql = "select * from t_trial_application where order_id=?";
        return findFirst(sql, orderId);
    }

    public Page<TrialApplication> paginate(Integer pageNumber, Integer pageSize, Integer userId) {
        return paginate(pageNumber, pageSize, null, null, null, null, null, userId, null);
    }

    public Page<TrialApplication> paginate(Integer pageNumber, Integer pageSize, Integer trialId, String trialName, String status, String startTime, String endTime, Integer userId, Integer version) {
        String sql = "select a.*, b.name, b.cover, c.name as user_name, c.phone ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_trial_application as a left join t_trial as b on a.trial_id=b.id " +
                " left join t_user c on c.id = a.user_id " +
                " where 1=1");
        List<Object> params = Lists.newArrayList();
        String cond = " and ";
        if (trialId != null) {
            sqlExceptSelect.append(cond).append("a.trial_id=?");
            params.add(trialId);
        }
        if (StrKit.notBlank(trialName)) {
            sqlExceptSelect.append(cond).append("b.name like ?");
            params.add("%" + trialName + "%");
        }
        if (StrKit.notBlank(status)) {
            sqlExceptSelect.append(cond).append("a.status=?");
            params.add(status);
        }

        if (StrKit.notBlank(startTime) && StrKit.notBlank(endTime)) {
            sqlExceptSelect.append(cond).append("a.created_time between ? and ?");
            params.add(startTime);
            params.add(endTime);
        }
        if (userId != null) {
            sqlExceptSelect.append(cond).append("a.user_id=? ");
            params.add(userId);
        }
        if (version != null) {
            sqlExceptSelect.append(cond).append("a.version=?");
            params.add(version);
        }
        sqlExceptSelect.append(" order by a.created_time desc,a.id desc");
        return this.paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), params.toArray());
    }

    public Trial getTrial() {
        return Trial.dao.findById(getTrialId());
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public Order getOrder() {
        return Order.dao.findById(getOrderId());
    }

    public List<TrialApplication> find(Integer userId, Integer trialId, Integer version) {
        StringBuilder sql = new StringBuilder("select a.*, b.name, b.cover from t_trial_application a " +
                "join t_trial b on a.trial_id = b.id");
        List<Object> params = Lists.newArrayList();
        String cond = " where ";
        if (userId != null) {
            sql.append(cond);
            sql.append("a.user_id = ? ");
            params.add(userId);
            cond = " and ";
        }
        if (trialId != null) {
            sql.append(cond).append("a.trial_id = ?");
            params.add(trialId);
            cond = " and ";
        }
        if (version != null) {
            sql.append(cond);
            sql.append("a.version = ? ");
            params.add(version);
        }
        sql.append("order by a.id desc ");
        return find(sql.toString(), params.toArray());
    }

}
