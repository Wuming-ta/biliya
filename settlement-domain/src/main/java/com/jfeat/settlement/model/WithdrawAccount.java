/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.settlement.model;

import com.jfeat.identity.model.User;
import com.jfeat.settlement.model.base.WithdrawAccountBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;

@TableBind(tableName = "t_withdraw_account")
public class WithdrawAccount extends WithdrawAccountBase<WithdrawAccount> {

    /**
     * Only use for query.
     */
    public static WithdrawAccount dao = new WithdrawAccount();

    public enum Type {
        ALIPAY,
        WECHAT,
        BANK,
        OFFLINE,
        WALLET;
        public WithdrawAccount createAccount(Integer userId, String name, String account) {
            WithdrawAccount withdrawAccount = new WithdrawAccount();
            withdrawAccount.setType(this.toString());
            withdrawAccount.setUserId(userId);
            withdrawAccount.setOwnerName(name);
            withdrawAccount.setAccount(account);
            if (this == WALLET) {
                // 对于零钱钱包，account就是userid
                withdrawAccount.setAccount(userId.toString());
            }
            withdrawAccount.save();
            return withdrawAccount;
        }
    }

    public List<WithdrawAccount> findByUserId(int userId) {
        return find("select * from t_withdraw_account where user_id=?", userId);
    }

    public Page<Record> paginateGroupByUserId(int pageNumber, int pageSize, Integer userId, String userName) {
        List<Object> params = new ArrayList<>();
        String select = "select w.user_id,u.name as user_name,count(*) as count";
        StringBuilder query = new StringBuilder();
        query.append("from t_withdraw_account w join t_user u on u.id=w.user_id ");
        String cond = " where ";
        if (userId != null || StrKit.notBlank(userName)) {
            query.append(cond);
            query.append(" ( ");
            cond = "";
        }
        if(userId != null) {
            query.append(cond);
            query.append(" u.id=? ");
            params.add(userId);
            cond = " or ";
        }
        if (StrKit.notBlank(userName)) {
            query.append(cond);
            query.append(" u.name like ? ");
            params.add(userName+"%");
        }

        if (userId != null || StrKit.notBlank(userName)) {
            query.append(" )  ");
        }
        query.append("group by user_id");
        return Db.paginate(pageNumber, pageSize, select, query.toString(), params.toArray());
    }

}
