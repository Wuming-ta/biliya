/*
 *   Copyright (C) 2014-2016 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.settlement.model;

import com.google.common.collect.Lists;
import com.jfeat.kit.SqlQuery;
import com.jfeat.partner.model.base.ApplyBase;
import com.jfeat.settlement.model.base.OwnerBalanceBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@TableBind(tableName = "t_owner_balance")
public class OwnerBalance extends OwnerBalanceBase<OwnerBalance> {

    /**
     * Only use for query.
     */
    public static OwnerBalance dao = new OwnerBalance();

    public Page<OwnerBalance> queryRewardBalance(int pageNumber, int pageSize, Integer userId, String userName){
        List<Object> params = Lists.newArrayList();
        StringBuilder select = new StringBuilder("select b.*, u.name, " +
                "(select sum(reward) from t_order_item_reward where state='PENDING_SETTLEMENT' and  owner_id=user_id) as pending_reward, " +
                "(select sum(reward) from t_order_item_reward where state='SETTLED' and  owner_id=user_id) as settled_reward");
        StringBuilder query = new StringBuilder();
        query.append("from t_owner_balance as b ");
        query.append("join t_user as u on b.user_id=u.id ");

        if(userId != null && StrKit.notBlank(userName)) {
            query.append(" and ( b.user_id=? or u.name like ?) ");
            params.add(userId);
            params.add(userName + "%");
        }
        if (userId == null && StrKit.notBlank(userName)) {
            query.append(" and u.name like ? ");
            params.add(userName+"%");
        }
        if (userId != null && StrKit.isBlank(userName)) {
            query.append(" and b.user_id=? ");
            params.add(userId);
        }

        query.append(" order by balance desc,pending_reward desc,settled_reward desc,b.id asc");
        return this.paginate(pageNumber, pageSize, select.toString(), query.toString(), params.toArray());
    }

    public BigDecimal queryBalanceByUserId(Integer userId){
        SqlQuery query = new SqlQuery();
        query.select(Fields.BALANCE.toString());
        query.from(getTableName());
        query.where(Fields.USER_ID.eq("?"));
        return Db.queryBigDecimal(query.sql(),userId);
    }

    public OwnerBalance findByUserId(int userId) {
        return findFirst("select * from t_owner_balance where user_id=?", userId);
    }

    /**
     * 乐观锁更新.根据version确定更新成功情况。
     * @param balance
     * @param version
     * @param userId
     * @return
     */
    public static boolean luckyLockUpdate(BigDecimal balance, Integer version, Integer userId) {
        String sql = "update t_owner_balance set version=?, balance=? where user_id=? and version=?";
        Integer newVersion = 0;
        if (version < Integer.MAX_VALUE) {
            newVersion = version + 1;
        }
        return Db.update(sql, newVersion, balance, userId, version) > 0;
    }
}
