/*
 *   Copyright (C) 2014-2017 www.kequandian.net
 *
 *    The program may be used and/or copied only with the written permission
 *    from www.kequandian.net or in accordance with the terms and
 *    conditions stipulated in the agreement/contract under which the program
 *    has been supplied.
 *
 *    All rights reserved.
 *
 */

/*
 * This file is automatically generated by tools.
 * It defines the model for the table. All customize operation should 
 * be written here. Such as query/update/delete.
 * The controller calls this object.
 */
package com.jfeat.merchant.model;

import com.google.common.collect.Lists;
import com.jfeat.identity.model.User;
import com.jfeat.merchant.model.base.UserSettledMerchantBase;
import com.jfinal.ext.plugin.tablebind.TableBind;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.util.List;

@TableBind(tableName = "t_user_settled_merchant")
public class UserSettledMerchant extends UserSettledMerchantBase<UserSettledMerchant> {

    /**
     * Only use for query.
     */
    public static UserSettledMerchant dao = new UserSettledMerchant();

    public List<UserSettledMerchant> findByMerchantId(Integer merchantId) {
        return findByField(Fields.MERCHANT_ID.toString(), merchantId);
    }

    public SettledMerchant getSettledMerchant() {
        return SettledMerchant.dao.findById(getMerchantId());
    }

    public User getUser() {
        return User.dao.findById(getUserId());
    }

    public List<UserSettledMerchant> findByUserId(Integer userId) {
        return findByField(Fields.USER_ID.toString(), userId);
    }


    /**
     * 查找非商家用户
     * @param pageNumber
     * @param pageSize
     * @param search
     * @return
     */
    public Page<User> findNonMerchantUsers(int pageNumber, int pageSize, String search) {
        List<Object> params = Lists.newArrayList();
        String select = "select a.*";
        StringBuilder sql = new StringBuilder("from t_user a ");
        sql.append("left join t_user_settled_merchant b on a.id = b.user_id ");
        sql.append("where b.user_id is null ");
        if (StrKit.notBlank(search)) {
            sql.append(" and ( ");
            sql.append(" a.name like ? ");
            params.add("%" + search + "%");
            sql.append(" or a.uid like ? ");
            params.add("%" + search + "%");
            sql.append(" or a.phone like ? ");
            params.add("%" + search + "%");
            sql.append(" ) ");
        }
        return User.dao.paginate(pageNumber, pageSize, select, sql.toString(), params.toArray());
    }
}
